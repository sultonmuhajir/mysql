{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BAB 1: Pengantar MySQL 1.1. Pengertian MySQL Apa itu MySQL? MySQL adalah sebuah sistem manajemen basis data relasional (RDBMS) yang menggunakan SQL (Structured Query Language) sebagai bahasa pengelolaan data. MySQL bersifat open-source, sehingga dapat digunakan secara bebas dan dimodifikasi sesuai kebutuhan pengguna. MySQL biasanya digunakan untuk mengelola data dalam aplikasi web, seperti situs e-commerce, sistem manajemen konten (CMS), dan aplikasi berbasis data lainnya. Mengapa Memilih MySQL? Kinerja Tinggi : MySQL dikenal karena kecepatan dan kemampuannya untuk menangani volume data yang besar dengan efisien. Keandalan : MySQL memiliki reputasi yang baik dalam hal stabilitas dan keandalan. Skalabilitas : MySQL dapat dengan mudah diskalakan dari aplikasi kecil hingga sistem yang sangat besar. Komunitas Besar : MySQL memiliki komunitas pengguna dan pengembang yang besar, sehingga dukungan dan sumber daya tersedia dengan melimpah. 1.2. Sejarah dan Perkembangan Sejarah Singkat MySQL MySQL pertama kali dikembangkan oleh MySQL AB, sebuah perusahaan Swedia, pada tahun 1995 oleh Michael \"Monty\" Widenius, David Axmark, dan Allan Larsson. MySQL awalnya dikembangkan sebagai alternatif cepat dan andal untuk sistem basis data komersial. Pada tahun 2008, MySQL AB diakuisisi oleh Sun Microsystems, yang kemudian diakuisisi oleh Oracle Corporation pada tahun 2010. Sejak saat itu, Oracle telah mengelola dan terus mengembangkan MySQL, merilis versi terbaru yang menambahkan fitur-fitur baru dan perbaikan. Versi-Versi Utama MySQL MySQL 3.x : Versi awal yang menyediakan fitur dasar RDBMS. MySQL 4.x : Memperkenalkan fitur seperti query caching dan penggunaan SSL untuk keamanan. MySQL 5.x : Menambahkan dukungan untuk stored procedures, triggers, views, dan informasi skema. MySQL 8.x : Merupakan versi terbaru yang menawarkan peningkatan kinerja, keamanan, dan fitur-fitur baru seperti window functions dan CTE (Common Table Expressions). 1.3. Instalasi MySQL MySQL dapat diinstal pada berbagai sistem operasi, termasuk Windows, macOS, dan berbagai distribusi Linux seperti Ubuntu dan CentOS. Instalasi di Windows: Download Installer : Unduh MySQL Installer dari situs resmi MySQL (https://dev.mysql.com/downloads/installer/). Jalankan Installer : Klik dua kali pada file installer dan ikuti petunjuk untuk memilih versi MySQL yang ingin diinstal. Konfigurasi Awal : Atur root password, pilih tipe server (Development Machine, Server Machine, Dedicated MySQL Server), dan selesai. Instalasi di macOS: brew update brew install mysql brew services start mysql mysql_secure_installation Instalasi di Linux (Ubuntu): sudo apt update sudo apt install mysql-server sudo mysql_secure_installation 1.4. Arsitektur MySQL Komponen Utama MySQL MySQL Server : Inti dari sistem MySQL yang bertanggung jawab untuk menangani semua operasi database. Storage Engine : Komponen yang mengelola bagaimana data disimpan, diindeks, dan diambil. Contoh storage engine yang populer adalah InnoDB dan MyISAM. Query Processor : Komponen yang memproses permintaan SQL dari pengguna dan menentukan cara terbaik untuk mengeksekusi query. Connection Manager : Menangani koneksi dari klien ke server MySQL, memastikan bahwa setiap koneksi dikelola dengan baik. SQL Parser : Memeriksa sintaks dari pernyataan SQL untuk memastikan bahwa query valid sebelum dieksekusi. Cara Kerja MySQL Koneksi Klien ke Server : Klien mengirimkan pernyataan SQL melalui koneksi yang dikelola oleh Connection Manager. Pemeriksaan Sintaks : SQL Parser memeriksa pernyataan untuk memastikan tidak ada kesalahan sintaks. Optimasi Query : Query Processor mengoptimalkan cara query akan dieksekusi untuk meningkatkan efisiensi. Eksekusi Query : Storage Engine menyimpan, memperbarui, atau mengambil data sesuai dengan perintah yang diberikan. Mengembalikan Hasil ke Klien : MySQL Server mengirimkan hasil eksekusi query kembali ke klien. 1.5. Tools dan Interface MySQL Command Line Interface (CLI) MySQL CLI adalah alat baris perintah yang digunakan untuk berinteraksi dengan MySQL Server. Ini adalah alat utama untuk administrasi database, memungkinkan Anda untuk menjalankan perintah SQL, mengelola database, dan mengelola pengguna. Berikut adalah contoh penggunaan MySQL CLI. mysql -u root -p SHOW DATABASES ; CREATE DATABASE test_db ; USE test_db ; SHOW TABLES ; MySQL Workbench MySQL Workbench adalah alat GUI (Graphical User Interface) yang menyediakan fitur visual untuk merancang, mengelola, dan memodelkan database. Ini adalah alat yang sangat berguna untuk administrasi database, terutama bagi pengguna yang lebih nyaman dengan antarmuka grafis daripada baris perintah. PhpMyAdmin PhpMyAdmin adalah alat berbasis web untuk mengelola MySQL database. Ini sering digunakan oleh pengembang web karena terintegrasi dengan baik dengan server web Apache dan mudah diakses dari browser. Perbedaan dan Penggunaan CLI vs GUI Tools CLI : Lebih cepat dan lebih ringan, ideal untuk tugas-tugas administrasi rutin dan skrip otomatisasi. GUI Tools : Lebih ramah pengguna dan ideal untuk pemodelan database, perancangan query kompleks, dan visualisasi data.","title":"1 - Pengantar MySQL"},{"location":"#bab-1-pengantar-mysql","text":"","title":"BAB 1: Pengantar MySQL"},{"location":"#11-pengertian-mysql","text":"Apa itu MySQL? MySQL adalah sebuah sistem manajemen basis data relasional (RDBMS) yang menggunakan SQL (Structured Query Language) sebagai bahasa pengelolaan data. MySQL bersifat open-source, sehingga dapat digunakan secara bebas dan dimodifikasi sesuai kebutuhan pengguna. MySQL biasanya digunakan untuk mengelola data dalam aplikasi web, seperti situs e-commerce, sistem manajemen konten (CMS), dan aplikasi berbasis data lainnya. Mengapa Memilih MySQL? Kinerja Tinggi : MySQL dikenal karena kecepatan dan kemampuannya untuk menangani volume data yang besar dengan efisien. Keandalan : MySQL memiliki reputasi yang baik dalam hal stabilitas dan keandalan. Skalabilitas : MySQL dapat dengan mudah diskalakan dari aplikasi kecil hingga sistem yang sangat besar. Komunitas Besar : MySQL memiliki komunitas pengguna dan pengembang yang besar, sehingga dukungan dan sumber daya tersedia dengan melimpah.","title":"1.1. Pengertian MySQL"},{"location":"#12-sejarah-dan-perkembangan","text":"Sejarah Singkat MySQL MySQL pertama kali dikembangkan oleh MySQL AB, sebuah perusahaan Swedia, pada tahun 1995 oleh Michael \"Monty\" Widenius, David Axmark, dan Allan Larsson. MySQL awalnya dikembangkan sebagai alternatif cepat dan andal untuk sistem basis data komersial. Pada tahun 2008, MySQL AB diakuisisi oleh Sun Microsystems, yang kemudian diakuisisi oleh Oracle Corporation pada tahun 2010. Sejak saat itu, Oracle telah mengelola dan terus mengembangkan MySQL, merilis versi terbaru yang menambahkan fitur-fitur baru dan perbaikan. Versi-Versi Utama MySQL MySQL 3.x : Versi awal yang menyediakan fitur dasar RDBMS. MySQL 4.x : Memperkenalkan fitur seperti query caching dan penggunaan SSL untuk keamanan. MySQL 5.x : Menambahkan dukungan untuk stored procedures, triggers, views, dan informasi skema. MySQL 8.x : Merupakan versi terbaru yang menawarkan peningkatan kinerja, keamanan, dan fitur-fitur baru seperti window functions dan CTE (Common Table Expressions).","title":"1.2. Sejarah dan Perkembangan"},{"location":"#13-instalasi-mysql","text":"MySQL dapat diinstal pada berbagai sistem operasi, termasuk Windows, macOS, dan berbagai distribusi Linux seperti Ubuntu dan CentOS. Instalasi di Windows: Download Installer : Unduh MySQL Installer dari situs resmi MySQL (https://dev.mysql.com/downloads/installer/). Jalankan Installer : Klik dua kali pada file installer dan ikuti petunjuk untuk memilih versi MySQL yang ingin diinstal. Konfigurasi Awal : Atur root password, pilih tipe server (Development Machine, Server Machine, Dedicated MySQL Server), dan selesai. Instalasi di macOS: brew update brew install mysql brew services start mysql mysql_secure_installation Instalasi di Linux (Ubuntu): sudo apt update sudo apt install mysql-server sudo mysql_secure_installation","title":"1.3. Instalasi MySQL"},{"location":"#14-arsitektur-mysql","text":"Komponen Utama MySQL MySQL Server : Inti dari sistem MySQL yang bertanggung jawab untuk menangani semua operasi database. Storage Engine : Komponen yang mengelola bagaimana data disimpan, diindeks, dan diambil. Contoh storage engine yang populer adalah InnoDB dan MyISAM. Query Processor : Komponen yang memproses permintaan SQL dari pengguna dan menentukan cara terbaik untuk mengeksekusi query. Connection Manager : Menangani koneksi dari klien ke server MySQL, memastikan bahwa setiap koneksi dikelola dengan baik. SQL Parser : Memeriksa sintaks dari pernyataan SQL untuk memastikan bahwa query valid sebelum dieksekusi. Cara Kerja MySQL Koneksi Klien ke Server : Klien mengirimkan pernyataan SQL melalui koneksi yang dikelola oleh Connection Manager. Pemeriksaan Sintaks : SQL Parser memeriksa pernyataan untuk memastikan tidak ada kesalahan sintaks. Optimasi Query : Query Processor mengoptimalkan cara query akan dieksekusi untuk meningkatkan efisiensi. Eksekusi Query : Storage Engine menyimpan, memperbarui, atau mengambil data sesuai dengan perintah yang diberikan. Mengembalikan Hasil ke Klien : MySQL Server mengirimkan hasil eksekusi query kembali ke klien.","title":"1.4. Arsitektur MySQL"},{"location":"#15-tools-dan-interface","text":"MySQL Command Line Interface (CLI) MySQL CLI adalah alat baris perintah yang digunakan untuk berinteraksi dengan MySQL Server. Ini adalah alat utama untuk administrasi database, memungkinkan Anda untuk menjalankan perintah SQL, mengelola database, dan mengelola pengguna. Berikut adalah contoh penggunaan MySQL CLI. mysql -u root -p SHOW DATABASES ; CREATE DATABASE test_db ; USE test_db ; SHOW TABLES ; MySQL Workbench MySQL Workbench adalah alat GUI (Graphical User Interface) yang menyediakan fitur visual untuk merancang, mengelola, dan memodelkan database. Ini adalah alat yang sangat berguna untuk administrasi database, terutama bagi pengguna yang lebih nyaman dengan antarmuka grafis daripada baris perintah. PhpMyAdmin PhpMyAdmin adalah alat berbasis web untuk mengelola MySQL database. Ini sering digunakan oleh pengembang web karena terintegrasi dengan baik dengan server web Apache dan mudah diakses dari browser. Perbedaan dan Penggunaan CLI vs GUI Tools CLI : Lebih cepat dan lebih ringan, ideal untuk tugas-tugas administrasi rutin dan skrip otomatisasi. GUI Tools : Lebih ramah pengguna dan ideal untuk pemodelan database, perancangan query kompleks, dan visualisasi data.","title":"1.5. Tools dan Interface"},{"location":"fungsi-dan-operator/","text":"BAB 4: Fungsi dan Operator 4.1. Fungsi Agregat Fungsi agregat digunakan untuk melakukan perhitungan terhadap sekumpulan data dan mengembalikan hasil tunggal. Fungsi ini sering digunakan dalam perintah SELECT dengan klausa GROUP BY . Berikut adalah beberapa fungsi agregat yang umum digunakan beserta contoh. COUNT() : Menghitung jumlah baris yang memenuhi kriteria. SUM() : Menghitung total nilai dari kolom numerik. AVG() : Menghitung rata-rata nilai dari kolom numerik. MIN() : Mengambil nilai minimum dari kolom. MAX() : Mengambil nilai maksimum dari kolom. -- Menghitung jumlah mahasiswa per jurusan SELECT jurusan , COUNT ( * ) AS jumlah_mahasiswa FROM Mahasiswa GROUP BY jurusan ; -- Menghitung total gaji dan rata-rata gaji dari karyawan SELECT SUM ( gaji ) AS total_gaji , AVG ( gaji ) AS rata_rata_gaji FROM Karyawan ; -- Mendapatkan nilai maksimum dan minimum dari kolom harga pada tabel Produk SELECT MAX ( harga ) AS harga_tertinggi , MIN ( harga ) AS harga_terendah FROM Produk ; 4.2. Fungsi String Fungsi string digunakan untuk memanipulasi data karakter atau teks dalam SQL. Fungsi ini berguna untuk operasi seperti menggabungkan, memotong, mencari, atau mengganti string. Berikut adalah beberapa fungsi string yang umum digunakan beserta contoh. CONCAT() : Menggabungkan dua atau lebih string. SUBSTRING() : Mengambil sebagian string dari suatu teks. LENGTH() : Mengembalikan panjang string dalam karakter. UPPER() : Mengubah semua karakter string menjadi huruf besar. LOWER() : Mengubah semua karakter string menjadi huruf kecil. REPLACE() : Mengganti teks tertentu dalam string dengan teks lain. -- Menggabungkan nama depan dan nama belakang menjadi nama lengkap SELECT CONCAT ( nama_depan , ' ' , nama_belakang ) AS nama_lengkap FROM Pelanggan ; -- Mengambil 5 karakter pertama dari kolom deskripsi SELECT SUBSTRING ( deskripsi , 1 , 5 ) AS ringkasan FROM Artikel ; -- Menghitung panjang string pada kolom nama SELECT nama , LENGTH ( nama ) AS panjang_nama FROM Pegawai ; -- Mengubah nama produk menjadi huruf besar SELECT UPPER ( nama_produk ) AS nama_produk_uppercase FROM Produk ; -- Mengganti kata \"lama\" dengan \"baru\" dalam deskripsi produk SELECT REPLACE ( deskripsi , 'lama' , 'baru' ) AS deskripsi_baru FROM Produk ; 4.3. Fungsi DateTime Fungsi DateTime digunakan untuk memanipulasi dan mengolah data tanggal dan waktu. Fungsi ini sangat penting dalam aplikasi yang memerlukan penanganan waktu seperti pemesanan, pengiriman, dan lain-lain. Berikut adalah beberapa fungsi DateTime yang umum digunakan beserta contoh NOW() : Mengembalikan tanggal dan waktu saat ini. CURDATE() : Mengembalikan tanggal saat ini. CURTIME() : Mengembalikan waktu saat ini. DATE() : Mengambil bagian tanggal dari nilai DateTime. TIME() : Mengambil bagian waktu dari nilai DateTime. DATEDIFF() : Menghitung selisih hari antara dua tanggal. DATE_ADD() : Menambah interval waktu ke tanggal tertentu. DATE_SUB() : Mengurangi interval waktu dari tanggal tertentu. -- Mengambil tanggal dan waktu saat ini SELECT NOW () AS tanggal_waktu_saat_ini ; -- Mengambil tanggal saat ini SELECT CURDATE () AS tanggal_hari_ini ; -- Mengambil selisih hari antara dua tanggal SELECT DATEDIFF ( '2024-12-31' , '2024-01-01' ) AS selisih_hari ; -- Menambah 7 hari ke tanggal saat ini SELECT DATE_ADD ( CURDATE (), INTERVAL 7 DAY ) AS tanggal_minggu_depan ; -- Mengurangi 1 bulan dari tanggal saat ini SELECT DATE_SUB ( CURDATE (), INTERVAL 1 MONTH ) AS tanggal_bulan_lalu ; 4.4. Operator Logika Operator logika digunakan dalam klausa WHERE untuk menggabungkan beberapa kondisi. Berikut adalah operator logika yang umum digunakan beserta contoh. AND : Mengembalikan true jika semua kondisi yang dipisahkan oleh AND adalah true. OR : Mengembalikan true jika salah satu kondisi yang dipisahkan oleh OR adalah true. NOT : Membalik nilai boolean dari ekspresi. -- Memilih semua produk yang harganya antara 100 dan 500 dan stoknya lebih dari 0 SELECT * FROM Produk WHERE harga BETWEEN 100 AND 500 AND stok > 0 ; -- Memilih semua pelanggan yang berasal dari kota Jakarta atau Surabaya SELECT * FROM Pelanggan WHERE kota = 'Jakarta' OR kota = 'Surabaya' ; -- Memilih semua karyawan yang tidak bekerja di departemen IT SELECT * FROM Karyawan WHERE NOT departemen = 'IT' ; 4.5. Operator Perbandingan Operator perbandingan digunakan untuk membandingkan dua nilai. Berikut adalah operator perbandingan yang umum digunakan beserta contoh. = : Sama dengan != atau <> : Tidak sama dengan > : Lebih besar dari < : Lebih kecil dari >= : Lebih besar atau sama dengan <= : Lebih kecil atau sama dengan BETWEEN : Di antara dua nilai IN : Dalam kumpulan nilai LIKE : Pencocokan pola string -- Memilih semua produk dengan harga lebih dari 100 SELECT * FROM Produk WHERE harga > 100 ; -- Memilih semua pelanggan yang tidak berasal dari kota Bandung SELECT * FROM Pelanggan WHERE kota != 'Bandung' ; -- Memilih semua buku yang diterbitkan antara tahun 2000 dan 2020 SELECT * FROM Buku WHERE tahun_terbit BETWEEN 2000 AND 2020 ; -- Memilih semua nama yang mengandung huruf 'a' SELECT * FROM Pegawai WHERE nama LIKE '%a%' ;","title":"4 - Fungsi dan Operator"},{"location":"fungsi-dan-operator/#bab-4-fungsi-dan-operator","text":"","title":"BAB 4: Fungsi dan Operator"},{"location":"fungsi-dan-operator/#41-fungsi-agregat","text":"Fungsi agregat digunakan untuk melakukan perhitungan terhadap sekumpulan data dan mengembalikan hasil tunggal. Fungsi ini sering digunakan dalam perintah SELECT dengan klausa GROUP BY . Berikut adalah beberapa fungsi agregat yang umum digunakan beserta contoh. COUNT() : Menghitung jumlah baris yang memenuhi kriteria. SUM() : Menghitung total nilai dari kolom numerik. AVG() : Menghitung rata-rata nilai dari kolom numerik. MIN() : Mengambil nilai minimum dari kolom. MAX() : Mengambil nilai maksimum dari kolom. -- Menghitung jumlah mahasiswa per jurusan SELECT jurusan , COUNT ( * ) AS jumlah_mahasiswa FROM Mahasiswa GROUP BY jurusan ; -- Menghitung total gaji dan rata-rata gaji dari karyawan SELECT SUM ( gaji ) AS total_gaji , AVG ( gaji ) AS rata_rata_gaji FROM Karyawan ; -- Mendapatkan nilai maksimum dan minimum dari kolom harga pada tabel Produk SELECT MAX ( harga ) AS harga_tertinggi , MIN ( harga ) AS harga_terendah FROM Produk ;","title":"4.1. Fungsi Agregat"},{"location":"fungsi-dan-operator/#42-fungsi-string","text":"Fungsi string digunakan untuk memanipulasi data karakter atau teks dalam SQL. Fungsi ini berguna untuk operasi seperti menggabungkan, memotong, mencari, atau mengganti string. Berikut adalah beberapa fungsi string yang umum digunakan beserta contoh. CONCAT() : Menggabungkan dua atau lebih string. SUBSTRING() : Mengambil sebagian string dari suatu teks. LENGTH() : Mengembalikan panjang string dalam karakter. UPPER() : Mengubah semua karakter string menjadi huruf besar. LOWER() : Mengubah semua karakter string menjadi huruf kecil. REPLACE() : Mengganti teks tertentu dalam string dengan teks lain. -- Menggabungkan nama depan dan nama belakang menjadi nama lengkap SELECT CONCAT ( nama_depan , ' ' , nama_belakang ) AS nama_lengkap FROM Pelanggan ; -- Mengambil 5 karakter pertama dari kolom deskripsi SELECT SUBSTRING ( deskripsi , 1 , 5 ) AS ringkasan FROM Artikel ; -- Menghitung panjang string pada kolom nama SELECT nama , LENGTH ( nama ) AS panjang_nama FROM Pegawai ; -- Mengubah nama produk menjadi huruf besar SELECT UPPER ( nama_produk ) AS nama_produk_uppercase FROM Produk ; -- Mengganti kata \"lama\" dengan \"baru\" dalam deskripsi produk SELECT REPLACE ( deskripsi , 'lama' , 'baru' ) AS deskripsi_baru FROM Produk ;","title":"4.2. Fungsi String"},{"location":"fungsi-dan-operator/#43-fungsi-datetime","text":"Fungsi DateTime digunakan untuk memanipulasi dan mengolah data tanggal dan waktu. Fungsi ini sangat penting dalam aplikasi yang memerlukan penanganan waktu seperti pemesanan, pengiriman, dan lain-lain. Berikut adalah beberapa fungsi DateTime yang umum digunakan beserta contoh NOW() : Mengembalikan tanggal dan waktu saat ini. CURDATE() : Mengembalikan tanggal saat ini. CURTIME() : Mengembalikan waktu saat ini. DATE() : Mengambil bagian tanggal dari nilai DateTime. TIME() : Mengambil bagian waktu dari nilai DateTime. DATEDIFF() : Menghitung selisih hari antara dua tanggal. DATE_ADD() : Menambah interval waktu ke tanggal tertentu. DATE_SUB() : Mengurangi interval waktu dari tanggal tertentu. -- Mengambil tanggal dan waktu saat ini SELECT NOW () AS tanggal_waktu_saat_ini ; -- Mengambil tanggal saat ini SELECT CURDATE () AS tanggal_hari_ini ; -- Mengambil selisih hari antara dua tanggal SELECT DATEDIFF ( '2024-12-31' , '2024-01-01' ) AS selisih_hari ; -- Menambah 7 hari ke tanggal saat ini SELECT DATE_ADD ( CURDATE (), INTERVAL 7 DAY ) AS tanggal_minggu_depan ; -- Mengurangi 1 bulan dari tanggal saat ini SELECT DATE_SUB ( CURDATE (), INTERVAL 1 MONTH ) AS tanggal_bulan_lalu ;","title":"4.3. Fungsi DateTime"},{"location":"fungsi-dan-operator/#44-operator-logika","text":"Operator logika digunakan dalam klausa WHERE untuk menggabungkan beberapa kondisi. Berikut adalah operator logika yang umum digunakan beserta contoh. AND : Mengembalikan true jika semua kondisi yang dipisahkan oleh AND adalah true. OR : Mengembalikan true jika salah satu kondisi yang dipisahkan oleh OR adalah true. NOT : Membalik nilai boolean dari ekspresi. -- Memilih semua produk yang harganya antara 100 dan 500 dan stoknya lebih dari 0 SELECT * FROM Produk WHERE harga BETWEEN 100 AND 500 AND stok > 0 ; -- Memilih semua pelanggan yang berasal dari kota Jakarta atau Surabaya SELECT * FROM Pelanggan WHERE kota = 'Jakarta' OR kota = 'Surabaya' ; -- Memilih semua karyawan yang tidak bekerja di departemen IT SELECT * FROM Karyawan WHERE NOT departemen = 'IT' ;","title":"4.4. Operator Logika"},{"location":"fungsi-dan-operator/#45-operator-perbandingan","text":"Operator perbandingan digunakan untuk membandingkan dua nilai. Berikut adalah operator perbandingan yang umum digunakan beserta contoh. = : Sama dengan != atau <> : Tidak sama dengan > : Lebih besar dari < : Lebih kecil dari >= : Lebih besar atau sama dengan <= : Lebih kecil atau sama dengan BETWEEN : Di antara dua nilai IN : Dalam kumpulan nilai LIKE : Pencocokan pola string -- Memilih semua produk dengan harga lebih dari 100 SELECT * FROM Produk WHERE harga > 100 ; -- Memilih semua pelanggan yang tidak berasal dari kota Bandung SELECT * FROM Pelanggan WHERE kota != 'Bandung' ; -- Memilih semua buku yang diterbitkan antara tahun 2000 dan 2020 SELECT * FROM Buku WHERE tahun_terbit BETWEEN 2000 AND 2020 ; -- Memilih semua nama yang mengandung huruf 'a' SELECT * FROM Pegawai WHERE nama LIKE '%a%' ;","title":"4.5. Operator Perbandingan"},{"location":"join-dan-subquery/","text":"BAB 5: Join dan Subquery 5.1. Inner Join dan Full Join INNER JOIN mengembalikan hanya baris-baris yang memiliki data yang cocok di kedua tabel yang digabungkan. Jika ada baris di salah satu tabel yang tidak memiliki pasangan di tabel lain, maka baris tersebut tidak akan muncul dalam hasil. FULL JOIN (atau FULL OUTER JOIN ) mengembalikan semua baris ketika ada kecocokan di salah satu tabel. Jika tidak ada kecocokan, hasilnya adalah NULL pada sisi tabel yang tidak cocok. Namun, perlu dicatat bahwa MySQL tidak mendukung FULL JOIN secara langsung, tetapi Anda bisa mensimulasikannya menggunakan kombinasi LEFT JOIN dan RIGHT JOIN dengan klausa UNION . -- Contoh Penggunaan Inner Join SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa INNER JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; -- Contoh Penggunaan Full Join SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa LEFT JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa UNION SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa RIGHT JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; 5.2. Cross Join dan Self Join CROSS JOIN digunakan untuk menggabungkan setiap baris dari tabel pertama dengan setiap baris dari tabel kedua. Hasil dari CROSS JOIN adalah perkalian Cartesian dari kedua tabel. Jika tabel pertama memiliki m baris dan tabel kedua memiliki n baris, maka hasil CROSS JOIN akan memiliki m * n baris. SELF JOIN adalah join tabel dengan dirinya sendiri. Ini berguna ketika Anda ingin membandingkan baris dalam tabel yang sama. Untuk menggunakan SELF JOIN , Anda biasanya memberi alias pada tabel tersebut untuk membedakan dua instance dari tabel yang sama. -- Contoh Penggunaan Cross Join SELECT Mahasiswa . nama , MataKuliah . nama_mata_kuliah FROM Mahasiswa CROSS JOIN MataKuliah ; -- Contoh Penggunaan Self Join SELECT k1 . nama AS nama_karyawan , k2 . nama AS nama_manager FROM Karyawan k1 LEFT JOIN Karyawan k2 ON k1 . id_manager = k2 . id_karyawan ; 5.3. Subquery Subquery adalah query yang berada di dalam query lain dan digunakan untuk melakukan operasi lebih lanjut terhadap hasil dari query utama. Subquery dapat digunakan dalam beberapa klausa SQL seperti SELECT , FROM , dan WHERE . Subquery di klausa SELECT sering digunakan untuk menghitung nilai tambahan atau informasi yang diperlukan berdasarkan hasil dari query utama. Subquery di klausa FROM disebut juga dengan \"derived table\". Subquery ini berfungsi sebagai tabel sementara yang dapat digunakan di query utama. Subquery di klausa WHERE digunakan untuk memfilter data berdasarkan hasil dari subquery. -- Contoh Penggunaan Subquery di Klausa SELECT SELECT nama , ( SELECT COUNT ( * ) FROM Nilai WHERE Mahasiswa . id = Nilai . id_mahasiswa ) AS jumlah_mata_kuliah FROM Mahasiswa ; -- Contoh Penggunaan Subquery di Klausa FROM SELECT mata_kuliah , AVG ( nilai ) AS rata_rata_nilai FROM ( SELECT mata_kuliah , nilai FROM Nilai ) AS SubqueryNilai GROUP BY mata_kuliah ; -- Contoh Penggunaan Subquery di Klausa WHERE SELECT nama FROM Mahasiswa WHERE id IN ( SELECT id_mahasiswa FROM Nilai WHERE nilai > ( SELECT AVG ( nilai ) FROM Nilai ) ); 5.4. Nested Subquery Nested Subquery adalah subquery yang berada di dalam subquery lain. Ini memungkinkan Anda untuk menulis query yang lebih kompleks untuk memfilter data berdasarkan beberapa kondisi. -- Contoh Penggunaan Nested Subquery SELECT nama FROM Mahasiswa WHERE id IN ( SELECT id_mahasiswa FROM Nilai WHERE nilai = ( SELECT MAX ( nilai ) FROM Nilai AS N WHERE N . mata_kuliah = Nilai . mata_kuliah ) ); 5.5. Variabel Session Variabel session digunakan untuk menyimpan hasil sementara atau menjalankan perhitungan yang akan digunakan dalam query selanjutnya. Dalam MySQL, Anda bisa menggunakan variabel session untuk menyimpan hasil dari sebuah query dan kemudian menggunakan hasil tersebut di query lain. -- Contoh Penggunaan Variabel Session SELECT @ avg_nilai : = AVG ( nilai ) FROM Nilai ; SELECT nama FROM Mahasiswa WHERE id IN ( SELECT id_mahasiswa FROM Nilai WHERE nilai > @ avg_nilai );","title":"5 - Join dan Subquery"},{"location":"join-dan-subquery/#bab-5-join-dan-subquery","text":"","title":"BAB 5: Join dan Subquery"},{"location":"join-dan-subquery/#51-inner-join-dan-full-join","text":"INNER JOIN mengembalikan hanya baris-baris yang memiliki data yang cocok di kedua tabel yang digabungkan. Jika ada baris di salah satu tabel yang tidak memiliki pasangan di tabel lain, maka baris tersebut tidak akan muncul dalam hasil. FULL JOIN (atau FULL OUTER JOIN ) mengembalikan semua baris ketika ada kecocokan di salah satu tabel. Jika tidak ada kecocokan, hasilnya adalah NULL pada sisi tabel yang tidak cocok. Namun, perlu dicatat bahwa MySQL tidak mendukung FULL JOIN secara langsung, tetapi Anda bisa mensimulasikannya menggunakan kombinasi LEFT JOIN dan RIGHT JOIN dengan klausa UNION . -- Contoh Penggunaan Inner Join SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa INNER JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; -- Contoh Penggunaan Full Join SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa LEFT JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa UNION SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa RIGHT JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ;","title":"5.1. Inner Join dan Full Join"},{"location":"join-dan-subquery/#52-cross-join-dan-self-join","text":"CROSS JOIN digunakan untuk menggabungkan setiap baris dari tabel pertama dengan setiap baris dari tabel kedua. Hasil dari CROSS JOIN adalah perkalian Cartesian dari kedua tabel. Jika tabel pertama memiliki m baris dan tabel kedua memiliki n baris, maka hasil CROSS JOIN akan memiliki m * n baris. SELF JOIN adalah join tabel dengan dirinya sendiri. Ini berguna ketika Anda ingin membandingkan baris dalam tabel yang sama. Untuk menggunakan SELF JOIN , Anda biasanya memberi alias pada tabel tersebut untuk membedakan dua instance dari tabel yang sama. -- Contoh Penggunaan Cross Join SELECT Mahasiswa . nama , MataKuliah . nama_mata_kuliah FROM Mahasiswa CROSS JOIN MataKuliah ; -- Contoh Penggunaan Self Join SELECT k1 . nama AS nama_karyawan , k2 . nama AS nama_manager FROM Karyawan k1 LEFT JOIN Karyawan k2 ON k1 . id_manager = k2 . id_karyawan ;","title":"5.2. Cross Join dan Self Join"},{"location":"join-dan-subquery/#53-subquery","text":"Subquery adalah query yang berada di dalam query lain dan digunakan untuk melakukan operasi lebih lanjut terhadap hasil dari query utama. Subquery dapat digunakan dalam beberapa klausa SQL seperti SELECT , FROM , dan WHERE . Subquery di klausa SELECT sering digunakan untuk menghitung nilai tambahan atau informasi yang diperlukan berdasarkan hasil dari query utama. Subquery di klausa FROM disebut juga dengan \"derived table\". Subquery ini berfungsi sebagai tabel sementara yang dapat digunakan di query utama. Subquery di klausa WHERE digunakan untuk memfilter data berdasarkan hasil dari subquery. -- Contoh Penggunaan Subquery di Klausa SELECT SELECT nama , ( SELECT COUNT ( * ) FROM Nilai WHERE Mahasiswa . id = Nilai . id_mahasiswa ) AS jumlah_mata_kuliah FROM Mahasiswa ; -- Contoh Penggunaan Subquery di Klausa FROM SELECT mata_kuliah , AVG ( nilai ) AS rata_rata_nilai FROM ( SELECT mata_kuliah , nilai FROM Nilai ) AS SubqueryNilai GROUP BY mata_kuliah ; -- Contoh Penggunaan Subquery di Klausa WHERE SELECT nama FROM Mahasiswa WHERE id IN ( SELECT id_mahasiswa FROM Nilai WHERE nilai > ( SELECT AVG ( nilai ) FROM Nilai ) );","title":"5.3. Subquery"},{"location":"join-dan-subquery/#54-nested-subquery","text":"Nested Subquery adalah subquery yang berada di dalam subquery lain. Ini memungkinkan Anda untuk menulis query yang lebih kompleks untuk memfilter data berdasarkan beberapa kondisi. -- Contoh Penggunaan Nested Subquery SELECT nama FROM Mahasiswa WHERE id IN ( SELECT id_mahasiswa FROM Nilai WHERE nilai = ( SELECT MAX ( nilai ) FROM Nilai AS N WHERE N . mata_kuliah = Nilai . mata_kuliah ) );","title":"5.4. Nested Subquery"},{"location":"join-dan-subquery/#55-variabel-session","text":"Variabel session digunakan untuk menyimpan hasil sementara atau menjalankan perhitungan yang akan digunakan dalam query selanjutnya. Dalam MySQL, Anda bisa menggunakan variabel session untuk menyimpan hasil dari sebuah query dan kemudian menggunakan hasil tersebut di query lain. -- Contoh Penggunaan Variabel Session SELECT @ avg_nilai : = AVG ( nilai ) FROM Nilai ; SELECT nama FROM Mahasiswa WHERE id IN ( SELECT id_mahasiswa FROM Nilai WHERE nilai > @ avg_nilai );","title":"5.5. Variabel Session"},{"location":"keamanan-dan-backup/","text":"BAB 8: Keamanan dan Backup 8.1. Manajemen User Manajemen user di MySQL bertujuan untuk mengontrol siapa saja yang dapat mengakses database dan tindakan apa yang diizinkan. Ini melibatkan pembuatan user, pemberian hak akses, dan pengaturan password yang aman. Berikut adalah beberapa jenis manajemen user beserta contoh penggunaannya. CREATE USER : Digunakan untuk membuat user baru. ALTER USER : Mengubah detail user seperti password. DROP USER : Menghapus user dari database. -- Membuat user baru dengan hak akses hanya untuk localhost CREATE USER 'new_user' @ 'localhost' IDENTIFIED BY 'secure_password' ; -- Mengubah password user ALTER USER 'new_user' @ 'localhost' IDENTIFIED BY 'new_secure_password' ; -- Menghapus user DROP USER 'new_user' @ 'localhost' ; 8.2. Hak Akses Hak akses menentukan tindakan apa saja yang dapat dilakukan oleh user di database. Hak akses dapat diberikan pada berbagai tingkat seperti seluruh server, database tertentu, atau bahkan tabel dan kolom. Berikut adalah beberapa jenis hak akses beserta contoh penggunaannya. GRANT : Memberikan hak akses kepada user. REVOKE : Mencabut hak akses dari user. SHOW : Melihat hak akses yang dimiliki oleh user. -- Memberikan hak akses SELECT dan INSERT pada database `mydb` kepada user `new_user` GRANT SELECT , INSERT ON mydb . * TO 'new_user' @ 'localhost' ; -- Mencabut hak akses INSERT dari user `new_user` REVOKE INSERT ON mydb . * FROM 'new_user' @ 'localhost' ; -- Menampilkan hak akses dari user `new_user` SHOW GRANTS FOR 'new_user' @ 'localhost' ; 8.3. Enkripsi Data Enkripsi data adalah proses pengamanan data dengan mengonversi informasi menjadi format yang tidak dapat dibaca tanpa kunci dekripsi. Ini melindungi data sensitif dari akses tidak sah. Berikut adalah beberapa tipe enkripsi pada MySQL beserta contoh penggunaannya. Enkripsi Data di Level Aplikasi : Menggunakan fungsi MySQL seperti AES_ENCRYPT() dan AES_DECRYPT() . Enkripsi Transportasi : Menggunakan SSL/TLS untuk enkripsi data yang ditransfer antara server dan klien. Enkripsi Penyimpanan : Mengenkripsi data yang disimpan di disk menggunakan fitur InnoDB untuk tabel atau partisi tertentu. -- Mengenkripsi data menggunakan AES INSERT INTO Users ( username , encrypted_password ) VALUES ( 'alice' , AES_ENCRYPT ( 'mysecretpassword' , 'mykey' )); -- Mendekripsi data menggunakan AES SELECT username , AES_DECRYPT ( encrypted_password , 'mykey' ) AS password FROM Users ; 8.4. Audit dan Log Audit dan log di MySQL digunakan untuk melacak aktivitas yang terjadi di dalam database. Ini penting untuk memantau akses tidak sah, mendeteksi anomali, dan memastikan kepatuhan terhadap kebijakan keamanan. Berikut adalah beberapa jenis log pada MySQL beserta contoh penggunaannya. General Query Log : Menyimpan semua perintah SQL yang diterima oleh server. Error Log : Menyimpan informasi tentang kesalahan yang terjadi. Binary Log : Menyimpan semua perubahan yang dibuat pada data, digunakan untuk replikasi dan recovery. Slow Query Log : Menyimpan informasi tentang query yang berjalan lebih lama dari waktu yang ditentukan. -- Mengaktifkan general query log SET GLOBAL general_log = 'ON' ; -- Mengatur lokasi file general query log SET GLOBAL general_log_file = '/var/log/mysql/mysql-general.log' ; -- Mengaktifkan slow query log SET GLOBAL slow_query_log = 'ON' ; -- Mengatur threshold waktu untuk slow query log SET GLOBAL long_query_time = 2 ; -- Dalam detik MySQL Enterprise Audit plugin menyediakan kemampuan audit lanjutan untuk database, termasuk logging aktivitas user dan query. Anda dapat menginstal dan mengonfigurasi plugin ini untuk meningkatkan keamanan database. 8.5. Backup Data Backup adalah proses membuat salinan data untuk digunakan dalam pemulihan jika terjadi kehilangan atau kerusakan data. Backup adalah bagian penting dari rencana pemulihan bencana untuk database. Berikut adalah beberapa jenis backup pada MySQL beserta contoh penggunaannya. Full Backup : Membuat salinan seluruh database. Incremental Backup : Membuat salinan hanya dari perubahan sejak backup terakhir. Differential Backup : Membuat salinan dari semua perubahan sejak full backup terakhir. # Backup database `mydb` ke file mysqldump -u root -p mydb > /backup/mydb_backup.sql # Backup seluruh server MySQL mysqldump -u root -p --all-databases > /backup/all_databases_backup.sql Metode backup: Mysqldump : Utilitas command line untuk melakukan backup database ke file teks. MySQL Workbench : Alat GUI yang menyediakan fitur backup dan restore. Percona XtraBackup : Alat untuk melakukan backup fisik tanpa downtime.","title":"8 - Keamanan dan Backup"},{"location":"keamanan-dan-backup/#bab-8-keamanan-dan-backup","text":"","title":"BAB 8: Keamanan dan Backup"},{"location":"keamanan-dan-backup/#81-manajemen-user","text":"Manajemen user di MySQL bertujuan untuk mengontrol siapa saja yang dapat mengakses database dan tindakan apa yang diizinkan. Ini melibatkan pembuatan user, pemberian hak akses, dan pengaturan password yang aman. Berikut adalah beberapa jenis manajemen user beserta contoh penggunaannya. CREATE USER : Digunakan untuk membuat user baru. ALTER USER : Mengubah detail user seperti password. DROP USER : Menghapus user dari database. -- Membuat user baru dengan hak akses hanya untuk localhost CREATE USER 'new_user' @ 'localhost' IDENTIFIED BY 'secure_password' ; -- Mengubah password user ALTER USER 'new_user' @ 'localhost' IDENTIFIED BY 'new_secure_password' ; -- Menghapus user DROP USER 'new_user' @ 'localhost' ;","title":"8.1. Manajemen User"},{"location":"keamanan-dan-backup/#82-hak-akses","text":"Hak akses menentukan tindakan apa saja yang dapat dilakukan oleh user di database. Hak akses dapat diberikan pada berbagai tingkat seperti seluruh server, database tertentu, atau bahkan tabel dan kolom. Berikut adalah beberapa jenis hak akses beserta contoh penggunaannya. GRANT : Memberikan hak akses kepada user. REVOKE : Mencabut hak akses dari user. SHOW : Melihat hak akses yang dimiliki oleh user. -- Memberikan hak akses SELECT dan INSERT pada database `mydb` kepada user `new_user` GRANT SELECT , INSERT ON mydb . * TO 'new_user' @ 'localhost' ; -- Mencabut hak akses INSERT dari user `new_user` REVOKE INSERT ON mydb . * FROM 'new_user' @ 'localhost' ; -- Menampilkan hak akses dari user `new_user` SHOW GRANTS FOR 'new_user' @ 'localhost' ;","title":"8.2. Hak Akses"},{"location":"keamanan-dan-backup/#83-enkripsi-data","text":"Enkripsi data adalah proses pengamanan data dengan mengonversi informasi menjadi format yang tidak dapat dibaca tanpa kunci dekripsi. Ini melindungi data sensitif dari akses tidak sah. Berikut adalah beberapa tipe enkripsi pada MySQL beserta contoh penggunaannya. Enkripsi Data di Level Aplikasi : Menggunakan fungsi MySQL seperti AES_ENCRYPT() dan AES_DECRYPT() . Enkripsi Transportasi : Menggunakan SSL/TLS untuk enkripsi data yang ditransfer antara server dan klien. Enkripsi Penyimpanan : Mengenkripsi data yang disimpan di disk menggunakan fitur InnoDB untuk tabel atau partisi tertentu. -- Mengenkripsi data menggunakan AES INSERT INTO Users ( username , encrypted_password ) VALUES ( 'alice' , AES_ENCRYPT ( 'mysecretpassword' , 'mykey' )); -- Mendekripsi data menggunakan AES SELECT username , AES_DECRYPT ( encrypted_password , 'mykey' ) AS password FROM Users ;","title":"8.3. Enkripsi Data"},{"location":"keamanan-dan-backup/#84-audit-dan-log","text":"Audit dan log di MySQL digunakan untuk melacak aktivitas yang terjadi di dalam database. Ini penting untuk memantau akses tidak sah, mendeteksi anomali, dan memastikan kepatuhan terhadap kebijakan keamanan. Berikut adalah beberapa jenis log pada MySQL beserta contoh penggunaannya. General Query Log : Menyimpan semua perintah SQL yang diterima oleh server. Error Log : Menyimpan informasi tentang kesalahan yang terjadi. Binary Log : Menyimpan semua perubahan yang dibuat pada data, digunakan untuk replikasi dan recovery. Slow Query Log : Menyimpan informasi tentang query yang berjalan lebih lama dari waktu yang ditentukan. -- Mengaktifkan general query log SET GLOBAL general_log = 'ON' ; -- Mengatur lokasi file general query log SET GLOBAL general_log_file = '/var/log/mysql/mysql-general.log' ; -- Mengaktifkan slow query log SET GLOBAL slow_query_log = 'ON' ; -- Mengatur threshold waktu untuk slow query log SET GLOBAL long_query_time = 2 ; -- Dalam detik MySQL Enterprise Audit plugin menyediakan kemampuan audit lanjutan untuk database, termasuk logging aktivitas user dan query. Anda dapat menginstal dan mengonfigurasi plugin ini untuk meningkatkan keamanan database.","title":"8.4. Audit dan Log"},{"location":"keamanan-dan-backup/#85-backup-data","text":"Backup adalah proses membuat salinan data untuk digunakan dalam pemulihan jika terjadi kehilangan atau kerusakan data. Backup adalah bagian penting dari rencana pemulihan bencana untuk database. Berikut adalah beberapa jenis backup pada MySQL beserta contoh penggunaannya. Full Backup : Membuat salinan seluruh database. Incremental Backup : Membuat salinan hanya dari perubahan sejak backup terakhir. Differential Backup : Membuat salinan dari semua perubahan sejak full backup terakhir. # Backup database `mydb` ke file mysqldump -u root -p mydb > /backup/mydb_backup.sql # Backup seluruh server MySQL mysqldump -u root -p --all-databases > /backup/all_databases_backup.sql Metode backup: Mysqldump : Utilitas command line untuk melakukan backup database ke file teks. MySQL Workbench : Alat GUI yang menyediakan fitur backup dan restore. Percona XtraBackup : Alat untuk melakukan backup fisik tanpa downtime.","title":"8.5. Backup Data"},{"location":"manajemen-data/","text":"BAB 6: Manajemen Data 6.1. Transaksi dan Commit Transaksi adalah serangkaian operasi SQL yang dijalankan sebagai satu unit kerja. Semua perintah dalam transaksi harus berhasil, atau jika salah satu perintah gagal, seluruh transaksi dibatalkan (rollback). Transaksi digunakan untuk memastikan konsistensi data dalam database. START TRANSACTION : Memulai transaksi baru. COMMIT : Menyimpan semua perubahan yang dilakukan selama transaksi. -- Memulai transaksi START TRANSACTION ; -- Contoh operasi transaksi INSERT INTO Akun ( nama , saldo ) VALUES ( 'Alice' , 1000 ); UPDATE Akun SET saldo = saldo - 100 WHERE nama = 'Alice' ; -- Menyimpan perubahan COMMIT ; 6.2. Rollback dan Savepoint ROLLBACK digunakan untuk membatalkan seluruh transaksi atau bagian dari transaksi sampai ke titik tertentu yang disebut SAVEPOINT . ROLLBACK mengembalikan database ke kondisi sebelum transaksi dimulai atau ke kondisi savepoint. SAVEPOINT digunakan untuk menandai titik tertentu dalam transaksi. Anda bisa ROLLBACK ke SAVEPOINT tersebut tanpa membatalkan seluruh transaksi. -- Memulai transaksi START TRANSACTION ; -- Menyisipkan data INSERT INTO Akun ( nama , saldo ) VALUES ( 'Charlie' , 800 ); -- Menandai savepoint SAVEPOINT sebelum_pemotongan ; -- Mengurangi saldo, misalnya saldo tidak cukup UPDATE Akun SET saldo = saldo - 1000 WHERE nama = 'Charlie' ; -- Rollback ke savepoint sebelum_pemotongan ROLLBACK TO sebelum_pemotongan ; -- Mengurangi saldo dengan nilai yang benar UPDATE Akun SET saldo = saldo - 200 WHERE nama = 'Charlie' ; -- Menyimpan perubahan COMMIT ; 6.3. View dan Penggunaannya VIEW adalah tabel virtual yang berisi hasil dari query SQL. VIEW tidak menyimpan data secara fisik, tetapi mengambil data dari tabel yang mendasarinya saat diakses. VIEW sangat berguna untuk menyederhanakan query kompleks dan meningkatkan keamanan data dengan memberikan akses terbatas. CREATE VIEW : Membuat view baru. ALTER VIEW : Memodifikasi view yang sudah ada. DROP VIEW : Menghapus view. -- Membuat view untuk menampilkan data mahasiswa dan nilai mereka CREATE VIEW V_Mahasiswa_Nilai AS SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; -- Menggunakan view untuk mengambil data SELECT * FROM V_Mahasiswa_Nilai ; -- Menghapus view DROP VIEW V_Mahasiswa_Nilai ; 6.4. Trigger dan Penggunaannya TRIGGER adalah sekumpulan perintah SQL yang secara otomatis dijalankan (atau \"dipicu\") oleh MySQL sebagai respons terhadap peristiwa tertentu pada tabel. Peristiwa ini bisa berupa INSERT , UPDATE , atau DELETE . CREATE TRIGGER : Membuat trigger baru. BEFORE dan AFTER : Menentukan apakah trigger dieksekusi sebelum atau sesudah operasi. DROP TRIGGER : Menghapus trigger. -- Membuat trigger yang secara otomatis menambahkan log setelah data ditambahkan ke tabel Mahasiswa CREATE TRIGGER after_insert_mahasiswa AFTER INSERT ON Mahasiswa FOR EACH ROW BEGIN INSERT INTO Log_Aktivitas ( aksi , waktu ) VALUES ( 'Insert data mahasiswa baru' , NOW ()); END ; -- Menghapus trigger DROP TRIGGER after_insert_mahasiswa ; 6.5. Event Scheduler EVENT SCHEDULER adalah fitur di MySQL yang memungkinkan pengguna untuk menjadwalkan perintah SQL atau kumpulan perintah untuk dieksekusi pada waktu yang ditentukan atau secara berkala. CREATE EVENT : Membuat event baru. ALTER EVENT : Mengubah event yang sudah ada. DROP EVENT : Menghapus event. ENABLE/DISABLE EVENT : Mengaktifkan atau menonaktifkan event. -- Mengaktifkan event scheduler SET GLOBAL event_scheduler = ON ; -- Membuat event yang secara otomatis menghapus data log yang lebih lama dari 30 hari setiap tengah malam CREATE EVENT hapus_log_lama ON SCHEDULE EVERY 1 DAY STARTS '2024-09-01 00:00:00' DO DELETE FROM Log_Aktivitas WHERE waktu < NOW () - INTERVAL 30 DAY ; -- Menghapus event DROP EVENT hapus_log_lama ;","title":"6 - Manajemen Data"},{"location":"manajemen-data/#bab-6-manajemen-data","text":"","title":"BAB 6: Manajemen Data"},{"location":"manajemen-data/#61-transaksi-dan-commit","text":"Transaksi adalah serangkaian operasi SQL yang dijalankan sebagai satu unit kerja. Semua perintah dalam transaksi harus berhasil, atau jika salah satu perintah gagal, seluruh transaksi dibatalkan (rollback). Transaksi digunakan untuk memastikan konsistensi data dalam database. START TRANSACTION : Memulai transaksi baru. COMMIT : Menyimpan semua perubahan yang dilakukan selama transaksi. -- Memulai transaksi START TRANSACTION ; -- Contoh operasi transaksi INSERT INTO Akun ( nama , saldo ) VALUES ( 'Alice' , 1000 ); UPDATE Akun SET saldo = saldo - 100 WHERE nama = 'Alice' ; -- Menyimpan perubahan COMMIT ;","title":"6.1. Transaksi dan Commit"},{"location":"manajemen-data/#62-rollback-dan-savepoint","text":"ROLLBACK digunakan untuk membatalkan seluruh transaksi atau bagian dari transaksi sampai ke titik tertentu yang disebut SAVEPOINT . ROLLBACK mengembalikan database ke kondisi sebelum transaksi dimulai atau ke kondisi savepoint. SAVEPOINT digunakan untuk menandai titik tertentu dalam transaksi. Anda bisa ROLLBACK ke SAVEPOINT tersebut tanpa membatalkan seluruh transaksi. -- Memulai transaksi START TRANSACTION ; -- Menyisipkan data INSERT INTO Akun ( nama , saldo ) VALUES ( 'Charlie' , 800 ); -- Menandai savepoint SAVEPOINT sebelum_pemotongan ; -- Mengurangi saldo, misalnya saldo tidak cukup UPDATE Akun SET saldo = saldo - 1000 WHERE nama = 'Charlie' ; -- Rollback ke savepoint sebelum_pemotongan ROLLBACK TO sebelum_pemotongan ; -- Mengurangi saldo dengan nilai yang benar UPDATE Akun SET saldo = saldo - 200 WHERE nama = 'Charlie' ; -- Menyimpan perubahan COMMIT ;","title":"6.2. Rollback dan Savepoint"},{"location":"manajemen-data/#63-view-dan-penggunaannya","text":"VIEW adalah tabel virtual yang berisi hasil dari query SQL. VIEW tidak menyimpan data secara fisik, tetapi mengambil data dari tabel yang mendasarinya saat diakses. VIEW sangat berguna untuk menyederhanakan query kompleks dan meningkatkan keamanan data dengan memberikan akses terbatas. CREATE VIEW : Membuat view baru. ALTER VIEW : Memodifikasi view yang sudah ada. DROP VIEW : Menghapus view. -- Membuat view untuk menampilkan data mahasiswa dan nilai mereka CREATE VIEW V_Mahasiswa_Nilai AS SELECT Mahasiswa . nama , Nilai . mata_kuliah , Nilai . nilai FROM Mahasiswa JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; -- Menggunakan view untuk mengambil data SELECT * FROM V_Mahasiswa_Nilai ; -- Menghapus view DROP VIEW V_Mahasiswa_Nilai ;","title":"6.3. View dan Penggunaannya"},{"location":"manajemen-data/#64-trigger-dan-penggunaannya","text":"TRIGGER adalah sekumpulan perintah SQL yang secara otomatis dijalankan (atau \"dipicu\") oleh MySQL sebagai respons terhadap peristiwa tertentu pada tabel. Peristiwa ini bisa berupa INSERT , UPDATE , atau DELETE . CREATE TRIGGER : Membuat trigger baru. BEFORE dan AFTER : Menentukan apakah trigger dieksekusi sebelum atau sesudah operasi. DROP TRIGGER : Menghapus trigger. -- Membuat trigger yang secara otomatis menambahkan log setelah data ditambahkan ke tabel Mahasiswa CREATE TRIGGER after_insert_mahasiswa AFTER INSERT ON Mahasiswa FOR EACH ROW BEGIN INSERT INTO Log_Aktivitas ( aksi , waktu ) VALUES ( 'Insert data mahasiswa baru' , NOW ()); END ; -- Menghapus trigger DROP TRIGGER after_insert_mahasiswa ;","title":"6.4. Trigger dan Penggunaannya"},{"location":"manajemen-data/#65-event-scheduler","text":"EVENT SCHEDULER adalah fitur di MySQL yang memungkinkan pengguna untuk menjadwalkan perintah SQL atau kumpulan perintah untuk dieksekusi pada waktu yang ditentukan atau secara berkala. CREATE EVENT : Membuat event baru. ALTER EVENT : Mengubah event yang sudah ada. DROP EVENT : Menghapus event. ENABLE/DISABLE EVENT : Mengaktifkan atau menonaktifkan event. -- Mengaktifkan event scheduler SET GLOBAL event_scheduler = ON ; -- Membuat event yang secara otomatis menghapus data log yang lebih lama dari 30 hari setiap tengah malam CREATE EVENT hapus_log_lama ON SCHEDULE EVERY 1 DAY STARTS '2024-09-01 00:00:00' DO DELETE FROM Log_Aktivitas WHERE waktu < NOW () - INTERVAL 30 DAY ; -- Menghapus event DROP EVENT hapus_log_lama ;","title":"6.5. Event Scheduler"},{"location":"optimasi-query/","text":"BAB 7: Optimasi Query 7.1. Analisis Query Analisis query adalah proses untuk memahami dan meningkatkan performa query SQL yang dijalankan di MySQL. Dengan memahami cara MySQL memproses query, kita dapat menemukan cara untuk mempercepat eksekusi query. Perintah EXPLAIN digunakan untuk mendapatkan informasi tentang bagaimana MySQL menjalankan query. Ini menampilkan informasi tentang pemilihan tabel, penggunaan indeks, dan estimasi jumlah baris yang akan diproses. Berikut adalah contoh penggunaan EXPLAIN . EXPLAIN SELECT Mahasiswa . nama , Nilai . mata_kuliah FROM Mahasiswa JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; Output dari EXPLAIN akan memberikan informasi seperti tipe join yang digunakan, indeks yang digunakan, dan perkiraan jumlah baris yang diproses. Informasi ini dapat membantu kita dalam menentukan cara untuk mengoptimalkan query. 7.2. Indexing Optimal Indeks (index) adalah struktur data yang digunakan untuk mempercepat pencarian data dalam tabel. Indeks mirip dengan indeks pada buku yang memungkinkan Anda menemukan informasi dengan cepat tanpa harus memeriksa setiap halaman. Berikut adalah beberapa jenis index yang umum digunakan beserta contoh penggunaannya. Primary Key Index : Indeks yang secara otomatis dibuat ketika Anda menetapkan kolom sebagai kunci utama (PRIMARY KEY). Ini adalah indeks unik yang memastikan tidak ada duplikat nilai di kolom tersebut. Unique Index : Indeks yang memastikan bahwa semua nilai dalam kolom atau grup kolom adalah unik. Index Biasa (Non-Unique Index) : Digunakan untuk meningkatkan kecepatan pencarian data tanpa batasan unik. Full-Text Index : Digunakan untuk pencarian teks penuh, biasanya di kolom tipe TEXT atau VARCHAR . Composite Index : Indeks yang terdiri dari lebih dari satu kolom. Berguna untuk query yang menggunakan beberapa kolom dalam klausa WHERE atau JOIN . -- Membuat index pada kolom nama di tabel Mahasiswa CREATE INDEX idx_nama ON Mahasiswa ( nama ); -- Membuat composite index pada kolom nama dan umur di tabel Mahasiswa CREATE INDEX idx_nama_umur ON Mahasiswa ( nama , umur ); Cara memilih index yang tepat: Gunakan indeks pada kolom yang sering digunakan dalam klausa WHERE , JOIN , atau klausa ORDER BY . Hindari penggunaan indeks pada kolom dengan banyak nilai duplikat, seperti kolom yang hanya memiliki dua nilai (misalnya kolom boolean). Hindari penggunaan indeks pada tabel kecil, karena overhead pemeliharaan indeks bisa lebih besar daripada keuntungan dari peningkatan performa query. 7.3. Query Cache Query Cache adalah fitur MySQL yang memungkinkan penyimpanan hasil query dalam cache sehingga query yang sama dapat dijalankan lebih cepat tanpa harus diproses ulang oleh server database. Berikut adalah cara menggunakan query cache beserta contoh penggunaannya. Mengaktifkan Query Cache : Query cache dapat diaktifkan atau dinonaktifkan menggunakan pengaturan di file konfigurasi MySQL ( my.cnf ). Menggunakan SQL_CACHE : Anda bisa menggunakan kata kunci SQL_CACHE dalam query Anda untuk memberitahu MySQL untuk menyimpan hasil query ke cache. -- Menggunakan query cache SELECT SQL_CACHE * FROM Mahasiswa WHERE nama = 'Alice' ; Catatan: Cache query hanya berguna untuk query SELECT yang hasilnya jarang berubah. Query cache akan dihapus atau di-refresh setiap kali tabel yang relevan diubah. 7.4. Partisi Tabel Partisi tabel adalah teknik untuk membagi tabel besar menjadi beberapa bagian yang lebih kecil, yang disebut partisi, berdasarkan kriteria tertentu. Setiap partisi dapat diproses dan dikelola secara terpisah, yang dapat meningkatkan kinerja query dan mengurangi waktu pemrosesan. Berikut adalah jenis-jenis partisi beserta contoh penggunaannya. Range Partitioning : Mempartisi tabel berdasarkan rentang nilai kolom. List Partitioning : Mempartisi tabel berdasarkan daftar nilai tertentu. Hash Partitioning : Mempartisi tabel berdasarkan hasil fungsi hash dari kolom. Key Partitioning : Sejenis hash partitioning yang menggunakan fungsi hash internal MySQL. -- Membuat tabel dengan partisi berdasarkan rentang nilai tahun CREATE TABLE Pesanan ( id INT , nama_pemesan VARCHAR ( 50 ), tahun_pesanan YEAR ) PARTITION BY RANGE ( tahun_pesanan ) ( PARTITION p2010 VALUES LESS THAN ( 2011 ), PARTITION p2020 VALUES LESS THAN ( 2021 ), PARTITION p_lain VALUES LESS THAN MAXVALUE ); Manfaat partisi tabel: Meningkatkan Kinerja Query : Query yang hanya membutuhkan sebagian kecil data dapat diproses lebih cepat karena hanya sebagian partisi yang perlu dibaca. Manajemen Data Lebih Mudah : Partisi dapat dipindahkan, dihapus, atau diarsipkan secara terpisah. Mengurangi I/O : Memori dan disk I/O dapat dikurangi dengan mengakses hanya partisi yang relevan. 7.5. Profiling dan Debugging Profiling digunakan untuk menganalisis kinerja query dan operasi lainnya di MySQL. Dengan menggunakan perintah SHOW PROFILE , kita bisa mendapatkan rincian tentang berapa banyak waktu yang dihabiskan untuk setiap bagian dari query. Berikut adalah contoh penggunaan profilling. -- Mengaktifkan profiling SET profiling = 1 ; -- Menjalankan query SELECT * FROM Mahasiswa WHERE nama = 'Alice' ; -- Melihat hasil profiling SHOW PROFILES ; -- Melihat rincian waktu untuk query tertentu SHOW PROFILE FOR QUERY 1 ; Debugging adalah proses untuk menemukan dan memperbaiki kesalahan dalam query SQL. Berikut adalah beberapa teknik yang dapat digunakan untuk debugging query beserta contoh penggunaannya. Gunakan perintah EXPLAIN untuk melihat bagaimana MySQL menjalankan query Anda. Gunakan perintah SHOW WARNINGS setelah query untuk melihat peringatan yang dihasilkan MySQL. Periksa log MySQL untuk pesan kesalahan atau informasi debugging lainnya. -- Contoh query dengan kesalahan sintaks SELECT * FORM Mahasiswa ; -- Kesalahan: seharusnya FROM, bukan FORM -- Melihat peringatan atau kesalahan SHOW WARNINGS ;","title":"7 - Optimasi Query"},{"location":"optimasi-query/#bab-7-optimasi-query","text":"","title":"BAB 7: Optimasi Query"},{"location":"optimasi-query/#71-analisis-query","text":"Analisis query adalah proses untuk memahami dan meningkatkan performa query SQL yang dijalankan di MySQL. Dengan memahami cara MySQL memproses query, kita dapat menemukan cara untuk mempercepat eksekusi query. Perintah EXPLAIN digunakan untuk mendapatkan informasi tentang bagaimana MySQL menjalankan query. Ini menampilkan informasi tentang pemilihan tabel, penggunaan indeks, dan estimasi jumlah baris yang akan diproses. Berikut adalah contoh penggunaan EXPLAIN . EXPLAIN SELECT Mahasiswa . nama , Nilai . mata_kuliah FROM Mahasiswa JOIN Nilai ON Mahasiswa . id = Nilai . id_mahasiswa ; Output dari EXPLAIN akan memberikan informasi seperti tipe join yang digunakan, indeks yang digunakan, dan perkiraan jumlah baris yang diproses. Informasi ini dapat membantu kita dalam menentukan cara untuk mengoptimalkan query.","title":"7.1. Analisis Query"},{"location":"optimasi-query/#72-indexing-optimal","text":"Indeks (index) adalah struktur data yang digunakan untuk mempercepat pencarian data dalam tabel. Indeks mirip dengan indeks pada buku yang memungkinkan Anda menemukan informasi dengan cepat tanpa harus memeriksa setiap halaman. Berikut adalah beberapa jenis index yang umum digunakan beserta contoh penggunaannya. Primary Key Index : Indeks yang secara otomatis dibuat ketika Anda menetapkan kolom sebagai kunci utama (PRIMARY KEY). Ini adalah indeks unik yang memastikan tidak ada duplikat nilai di kolom tersebut. Unique Index : Indeks yang memastikan bahwa semua nilai dalam kolom atau grup kolom adalah unik. Index Biasa (Non-Unique Index) : Digunakan untuk meningkatkan kecepatan pencarian data tanpa batasan unik. Full-Text Index : Digunakan untuk pencarian teks penuh, biasanya di kolom tipe TEXT atau VARCHAR . Composite Index : Indeks yang terdiri dari lebih dari satu kolom. Berguna untuk query yang menggunakan beberapa kolom dalam klausa WHERE atau JOIN . -- Membuat index pada kolom nama di tabel Mahasiswa CREATE INDEX idx_nama ON Mahasiswa ( nama ); -- Membuat composite index pada kolom nama dan umur di tabel Mahasiswa CREATE INDEX idx_nama_umur ON Mahasiswa ( nama , umur ); Cara memilih index yang tepat: Gunakan indeks pada kolom yang sering digunakan dalam klausa WHERE , JOIN , atau klausa ORDER BY . Hindari penggunaan indeks pada kolom dengan banyak nilai duplikat, seperti kolom yang hanya memiliki dua nilai (misalnya kolom boolean). Hindari penggunaan indeks pada tabel kecil, karena overhead pemeliharaan indeks bisa lebih besar daripada keuntungan dari peningkatan performa query.","title":"7.2. Indexing Optimal"},{"location":"optimasi-query/#73-query-cache","text":"Query Cache adalah fitur MySQL yang memungkinkan penyimpanan hasil query dalam cache sehingga query yang sama dapat dijalankan lebih cepat tanpa harus diproses ulang oleh server database. Berikut adalah cara menggunakan query cache beserta contoh penggunaannya. Mengaktifkan Query Cache : Query cache dapat diaktifkan atau dinonaktifkan menggunakan pengaturan di file konfigurasi MySQL ( my.cnf ). Menggunakan SQL_CACHE : Anda bisa menggunakan kata kunci SQL_CACHE dalam query Anda untuk memberitahu MySQL untuk menyimpan hasil query ke cache. -- Menggunakan query cache SELECT SQL_CACHE * FROM Mahasiswa WHERE nama = 'Alice' ; Catatan: Cache query hanya berguna untuk query SELECT yang hasilnya jarang berubah. Query cache akan dihapus atau di-refresh setiap kali tabel yang relevan diubah.","title":"7.3. Query Cache"},{"location":"optimasi-query/#74-partisi-tabel","text":"Partisi tabel adalah teknik untuk membagi tabel besar menjadi beberapa bagian yang lebih kecil, yang disebut partisi, berdasarkan kriteria tertentu. Setiap partisi dapat diproses dan dikelola secara terpisah, yang dapat meningkatkan kinerja query dan mengurangi waktu pemrosesan. Berikut adalah jenis-jenis partisi beserta contoh penggunaannya. Range Partitioning : Mempartisi tabel berdasarkan rentang nilai kolom. List Partitioning : Mempartisi tabel berdasarkan daftar nilai tertentu. Hash Partitioning : Mempartisi tabel berdasarkan hasil fungsi hash dari kolom. Key Partitioning : Sejenis hash partitioning yang menggunakan fungsi hash internal MySQL. -- Membuat tabel dengan partisi berdasarkan rentang nilai tahun CREATE TABLE Pesanan ( id INT , nama_pemesan VARCHAR ( 50 ), tahun_pesanan YEAR ) PARTITION BY RANGE ( tahun_pesanan ) ( PARTITION p2010 VALUES LESS THAN ( 2011 ), PARTITION p2020 VALUES LESS THAN ( 2021 ), PARTITION p_lain VALUES LESS THAN MAXVALUE ); Manfaat partisi tabel: Meningkatkan Kinerja Query : Query yang hanya membutuhkan sebagian kecil data dapat diproses lebih cepat karena hanya sebagian partisi yang perlu dibaca. Manajemen Data Lebih Mudah : Partisi dapat dipindahkan, dihapus, atau diarsipkan secara terpisah. Mengurangi I/O : Memori dan disk I/O dapat dikurangi dengan mengakses hanya partisi yang relevan.","title":"7.4. Partisi Tabel"},{"location":"optimasi-query/#75-profiling-dan-debugging","text":"Profiling digunakan untuk menganalisis kinerja query dan operasi lainnya di MySQL. Dengan menggunakan perintah SHOW PROFILE , kita bisa mendapatkan rincian tentang berapa banyak waktu yang dihabiskan untuk setiap bagian dari query. Berikut adalah contoh penggunaan profilling. -- Mengaktifkan profiling SET profiling = 1 ; -- Menjalankan query SELECT * FROM Mahasiswa WHERE nama = 'Alice' ; -- Melihat hasil profiling SHOW PROFILES ; -- Melihat rincian waktu untuk query tertentu SHOW PROFILE FOR QUERY 1 ; Debugging adalah proses untuk menemukan dan memperbaiki kesalahan dalam query SQL. Berikut adalah beberapa teknik yang dapat digunakan untuk debugging query beserta contoh penggunaannya. Gunakan perintah EXPLAIN untuk melihat bagaimana MySQL menjalankan query Anda. Gunakan perintah SHOW WARNINGS setelah query untuk melihat peringatan yang dihasilkan MySQL. Periksa log MySQL untuk pesan kesalahan atau informasi debugging lainnya. -- Contoh query dengan kesalahan sintaks SELECT * FORM Mahasiswa ; -- Kesalahan: seharusnya FROM, bukan FORM -- Melihat peringatan atau kesalahan SHOW WARNINGS ;","title":"7.5. Profiling dan Debugging"},{"location":"query-dasar-sql/","text":"BAB 3: Query Dasar SQL 3.1. Perintah DDL Perintah Data Definition Language (DDL) digunakan untuk mendefinisikan struktur database. Berikut adalah beberapa perintah DDL yang umum digunakan beserta contoh. CREATE : Membuat database atau tabel baru. ALTER : Memodifikasi struktur tabel yang ada. DROP : Menghapus database atau tabel. TRUNCATE : Menghapus semua baris dalam tabel tanpa menghapus struktur tabel. CREATE TABLE Buku ( id INT AUTO_INCREMENT PRIMARY KEY , judul VARCHAR ( 255 ), pengarang VARCHAR ( 100 ), tahun_terbit YEAR ); ALTER TABLE Buku ADD penerbit VARCHAR ( 100 ); DROP TABLE Buku ; TRUNCATE TABLE Buku ; 3.2. Perintah DML Perintah Data Manipulation Language (DML) digunakan untuk memanipulasi data dalam tabel. Berikut adalah beberapa perintah DML yang umum digunakan beserta contoh. INSERT : Menambahkan data baru ke tabel. SELECT : Mengambil data dari satu atau lebih tabel. UPDATE : Memperbarui data yang ada dalam tabel. DELETE : Menghapus data dari tabel. INSERT INTO Buku ( judul , pengarang , tahun_terbit ) VALUES ( 'Pemrograman Python' , 'John Doe' , 2020 ); SELECT * FROM Buku ; UPDATE Buku SET tahun_terbit = 2021 WHERE judul = 'Pemrograman Python' ; DELETE FROM Buku WHERE judul = 'Pemrograman Python' ; 3.3. Filter dan Sorting Filter digunakan untuk menyaring data berdasarkan kondisi tertentu menggunakan klausa WHERE . Sorting digunakan untuk mengurutkan data berdasarkan satu atau lebih kolom menggunakan klausa ORDER BY . Berikut adalah contoh filter dan sorting. SELECT * FROM Buku WHERE pengarang = 'John Doe' ORDER BY tahun_terbit DESC ; 3.4. Limit dan Offset Klausa LIMIT digunakan untuk membatasi jumlah baris yang diambil oleh query, sedangkan OFFSET digunakan untuk melewati sejumlah baris sebelum memulai pengambilan data. Berikut adalah contoh penggunaan LIMIT dan OFFSET . SELECT * FROM Buku LIMIT 5 ; -- Ambil 5 baris pertama SELECT * FROM Buku LIMIT 5 OFFSET 10 ; -- Ambil 5 baris, mulai dari baris ke-11 3.5. Distinct dan Case DISTINCT digunakan untuk menghapus duplikasi data dalam hasil query. CASE digunakan untuk melakukan operasi kondisional dalam query. Berikut adalah contoh penggunaan DISTINCT dan CASE . SELECT DISTINCT pengarang FROM Buku ; -- Mengambil daftar pengarang tanpa duplikasi SELECT judul , CASE WHEN tahun_terbit < 2000 THEN 'Old' ELSE 'New' END AS Kategori FROM Buku ;","title":"3 - Query Dasar SQL"},{"location":"query-dasar-sql/#bab-3-query-dasar-sql","text":"","title":"BAB 3: Query Dasar SQL"},{"location":"query-dasar-sql/#31-perintah-ddl","text":"Perintah Data Definition Language (DDL) digunakan untuk mendefinisikan struktur database. Berikut adalah beberapa perintah DDL yang umum digunakan beserta contoh. CREATE : Membuat database atau tabel baru. ALTER : Memodifikasi struktur tabel yang ada. DROP : Menghapus database atau tabel. TRUNCATE : Menghapus semua baris dalam tabel tanpa menghapus struktur tabel. CREATE TABLE Buku ( id INT AUTO_INCREMENT PRIMARY KEY , judul VARCHAR ( 255 ), pengarang VARCHAR ( 100 ), tahun_terbit YEAR ); ALTER TABLE Buku ADD penerbit VARCHAR ( 100 ); DROP TABLE Buku ; TRUNCATE TABLE Buku ;","title":"3.1. Perintah DDL"},{"location":"query-dasar-sql/#32-perintah-dml","text":"Perintah Data Manipulation Language (DML) digunakan untuk memanipulasi data dalam tabel. Berikut adalah beberapa perintah DML yang umum digunakan beserta contoh. INSERT : Menambahkan data baru ke tabel. SELECT : Mengambil data dari satu atau lebih tabel. UPDATE : Memperbarui data yang ada dalam tabel. DELETE : Menghapus data dari tabel. INSERT INTO Buku ( judul , pengarang , tahun_terbit ) VALUES ( 'Pemrograman Python' , 'John Doe' , 2020 ); SELECT * FROM Buku ; UPDATE Buku SET tahun_terbit = 2021 WHERE judul = 'Pemrograman Python' ; DELETE FROM Buku WHERE judul = 'Pemrograman Python' ;","title":"3.2. Perintah DML"},{"location":"query-dasar-sql/#33-filter-dan-sorting","text":"Filter digunakan untuk menyaring data berdasarkan kondisi tertentu menggunakan klausa WHERE . Sorting digunakan untuk mengurutkan data berdasarkan satu atau lebih kolom menggunakan klausa ORDER BY . Berikut adalah contoh filter dan sorting. SELECT * FROM Buku WHERE pengarang = 'John Doe' ORDER BY tahun_terbit DESC ;","title":"3.3. Filter dan Sorting"},{"location":"query-dasar-sql/#34-limit-dan-offset","text":"Klausa LIMIT digunakan untuk membatasi jumlah baris yang diambil oleh query, sedangkan OFFSET digunakan untuk melewati sejumlah baris sebelum memulai pengambilan data. Berikut adalah contoh penggunaan LIMIT dan OFFSET . SELECT * FROM Buku LIMIT 5 ; -- Ambil 5 baris pertama SELECT * FROM Buku LIMIT 5 OFFSET 10 ; -- Ambil 5 baris, mulai dari baris ke-11","title":"3.4. Limit dan Offset"},{"location":"query-dasar-sql/#35-distinct-dan-case","text":"DISTINCT digunakan untuk menghapus duplikasi data dalam hasil query. CASE digunakan untuk melakukan operasi kondisional dalam query. Berikut adalah contoh penggunaan DISTINCT dan CASE . SELECT DISTINCT pengarang FROM Buku ; -- Mengambil daftar pengarang tanpa duplikasi SELECT judul , CASE WHEN tahun_terbit < 2000 THEN 'Old' ELSE 'New' END AS Kategori FROM Buku ;","title":"3.5. Distinct dan Case"},{"location":"struktur-database/","text":"BAB 2: Struktur Database 2.1. Tabel dan Kolom Tabel adalah struktur dasar dalam database yang digunakan untuk menyimpan data dalam bentuk baris dan kolom. Setiap tabel memiliki nama unik dan terdiri dari kolom-kolom yang mendefinisikan jenis data yang akan disimpan. Kolom menentukan struktur data dalam tabel dan setiap baris menyimpan data aktual. Berikut adalah contoh query untuk membuat tabel. CREATE TABLE Mahasiswa ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ), jurusan VARCHAR ( 50 ), angkatan YEAR ); 2.2. Tipe Data Tipe data menentukan jenis data yang dapat disimpan dalam sebuah kolom. Berikut adalah beberapa tipe data yang umum digunakan beserta contoh. Numerik : INT , FLOAT , DOUBLE , DECIMAL String : CHAR , VARCHAR , TEXT , BLOB Date/Time : DATE , DATETIME , TIMESTAMP , TIME , YEAR Boolean : BOOL , BOOLEAN CREATE TABLE Produk ( id INT AUTO_INCREMENT PRIMARY KEY , nama_produk VARCHAR ( 100 ), harga DECIMAL ( 10 , 2 ), tanggal_ditambahkan DATE ); 2.3. Relasi Antar Tabel Relasi antar tabel menggambarkan bagaimana tabel-tabel dalam database berhubungan satu sama lain. Berikut adalah beberapa jenis relasi yang umum digunakan beserta contoh. One-to-One : Satu baris di tabel A berhubungan dengan satu baris di tabel B. One-to-Many : Satu baris di tabel A berhubungan dengan banyak baris di tabel B. Many-to-Many : Banyak baris di tabel A berhubungan dengan banyak baris di tabel B. -- Contoh membuat relasi antar tabel (One-to-Many) CREATE TABLE Dosen ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ) ); CREATE TABLE MataKuliah ( id INT AUTO_INCREMENT PRIMARY KEY , nama_matkul VARCHAR ( 100 ), dosen_id INT , FOREIGN KEY ( dosen_id ) REFERENCES Dosen ( id ) ); 2.4. Index dan Kunci Indeks digunakan untuk meningkatkan kecepatan pencarian data dalam tabel. Kunci (key) adalah kolom atau kombinasi kolom yang digunakan untuk mengidentifikasi baris secara unik. Berikut adalah beberapa jenis kunci yang umum digunakan beserta contoh. Primary Key : Unik dan tidak boleh null. Foreign Key : Menunjukkan hubungan antar tabel. Unique Key : Unik tapi boleh null. Index Key : Meningkatkan performa pencarian. CREATE TABLE Pegawai ( id INT AUTO_INCREMENT , nama VARCHAR ( 100 ), email VARCHAR ( 100 ), PRIMARY KEY ( id ), UNIQUE KEY ( email ) ); 2.5. Normalisasi Data Normalisasi adalah proses pengorganisasian data dalam tabel untuk mengurangi redundansi dan meningkatkan integritas data. Berikut adalah beberapa bentuk normalisasi yang umum digunakan beserta contoh. 1NF (First Normal Form) : Menghilangkan grup berulang dalam kolom. 2NF (Second Normal Form) : Menghilangkan ketergantungan parsial. 3NF (Third Normal Form) : Menghilangkan ketergantungan transitif. -- 1NF CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ), produk1 VARCHAR ( 100 ), produk2 VARCHAR ( 100 ) ); -- 2NF (pemisahan produk ke tabel terpisah) CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ) ); CREATE TABLE ProdukPembelian ( id INT , pembelian_id INT , produk VARCHAR ( 100 ), FOREIGN KEY ( pembelian_id ) REFERENCES Pembelian ( id ) );","title":"2 - Struktur Database"},{"location":"struktur-database/#bab-2-struktur-database","text":"","title":"BAB 2: Struktur Database"},{"location":"struktur-database/#21-tabel-dan-kolom","text":"Tabel adalah struktur dasar dalam database yang digunakan untuk menyimpan data dalam bentuk baris dan kolom. Setiap tabel memiliki nama unik dan terdiri dari kolom-kolom yang mendefinisikan jenis data yang akan disimpan. Kolom menentukan struktur data dalam tabel dan setiap baris menyimpan data aktual. Berikut adalah contoh query untuk membuat tabel. CREATE TABLE Mahasiswa ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ), jurusan VARCHAR ( 50 ), angkatan YEAR );","title":"2.1. Tabel dan Kolom"},{"location":"struktur-database/#22-tipe-data","text":"Tipe data menentukan jenis data yang dapat disimpan dalam sebuah kolom. Berikut adalah beberapa tipe data yang umum digunakan beserta contoh. Numerik : INT , FLOAT , DOUBLE , DECIMAL String : CHAR , VARCHAR , TEXT , BLOB Date/Time : DATE , DATETIME , TIMESTAMP , TIME , YEAR Boolean : BOOL , BOOLEAN CREATE TABLE Produk ( id INT AUTO_INCREMENT PRIMARY KEY , nama_produk VARCHAR ( 100 ), harga DECIMAL ( 10 , 2 ), tanggal_ditambahkan DATE );","title":"2.2. Tipe Data"},{"location":"struktur-database/#23-relasi-antar-tabel","text":"Relasi antar tabel menggambarkan bagaimana tabel-tabel dalam database berhubungan satu sama lain. Berikut adalah beberapa jenis relasi yang umum digunakan beserta contoh. One-to-One : Satu baris di tabel A berhubungan dengan satu baris di tabel B. One-to-Many : Satu baris di tabel A berhubungan dengan banyak baris di tabel B. Many-to-Many : Banyak baris di tabel A berhubungan dengan banyak baris di tabel B. -- Contoh membuat relasi antar tabel (One-to-Many) CREATE TABLE Dosen ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ) ); CREATE TABLE MataKuliah ( id INT AUTO_INCREMENT PRIMARY KEY , nama_matkul VARCHAR ( 100 ), dosen_id INT , FOREIGN KEY ( dosen_id ) REFERENCES Dosen ( id ) );","title":"2.3. Relasi Antar Tabel"},{"location":"struktur-database/#24-index-dan-kunci","text":"Indeks digunakan untuk meningkatkan kecepatan pencarian data dalam tabel. Kunci (key) adalah kolom atau kombinasi kolom yang digunakan untuk mengidentifikasi baris secara unik. Berikut adalah beberapa jenis kunci yang umum digunakan beserta contoh. Primary Key : Unik dan tidak boleh null. Foreign Key : Menunjukkan hubungan antar tabel. Unique Key : Unik tapi boleh null. Index Key : Meningkatkan performa pencarian. CREATE TABLE Pegawai ( id INT AUTO_INCREMENT , nama VARCHAR ( 100 ), email VARCHAR ( 100 ), PRIMARY KEY ( id ), UNIQUE KEY ( email ) );","title":"2.4. Index dan Kunci"},{"location":"struktur-database/#25-normalisasi-data","text":"Normalisasi adalah proses pengorganisasian data dalam tabel untuk mengurangi redundansi dan meningkatkan integritas data. Berikut adalah beberapa bentuk normalisasi yang umum digunakan beserta contoh. 1NF (First Normal Form) : Menghilangkan grup berulang dalam kolom. 2NF (Second Normal Form) : Menghilangkan ketergantungan parsial. 3NF (Third Normal Form) : Menghilangkan ketergantungan transitif. -- 1NF CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ), produk1 VARCHAR ( 100 ), produk2 VARCHAR ( 100 ) ); -- 2NF (pemisahan produk ke tabel terpisah) CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ) ); CREATE TABLE ProdukPembelian ( id INT , pembelian_id INT , produk VARCHAR ( 100 ), FOREIGN KEY ( pembelian_id ) REFERENCES Pembelian ( id ) );","title":"2.5. Normalisasi Data"}]}