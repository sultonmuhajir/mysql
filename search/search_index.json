{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BAB 1: Pengantar MySQL 1.1. Pengertian MySQL MySQL adalah sistem manajemen basis data relasional (RDBMS) yang bersifat open-source. MySQL menggunakan Structured Query Language (SQL) sebagai bahasa untuk mengakses dan mengelola data. MySQL dikembangkan oleh MySQL AB, sebuah perusahaan Swedia, dan sekarang dimiliki oleh Oracle Corporation. 1.2. Sejarah dan Perkembangan MySQL pertama kali dikembangkan pada tahun 1994 oleh Michael Widenius (Monty), David Axmark, dan Allan Larsson di Swedia. Berikut adalah beberapa tonggak penting dalam sejarah perkembangan MySQL: 1995: MySQL versi pertama dirilis. 2001: MySQL mulai mendukung transaksi dengan adanya tabel tipe InnoDB. 2008: Sun Microsystems mengakuisisi MySQL AB. 2010: Oracle Corporation mengakuisisi Sun Microsystems, dan dengan demikian MySQL juga menjadi bagian dari Oracle. MySQL terus berkembang dan diperbarui, dengan fitur-fitur baru yang diimplementasikan untuk meningkatkan kinerja, skalabilitas, dan keamanan. 1.3. Instalasi dan Konfigurasi Untuk memulai menggunakan MySQL, Anda perlu menginstal perangkat lunak MySQL di sistem Anda. Berikut adalah langkah-langkah dasar untuk instalasi dan konfigurasi MySQL: Langkah Instalasi: Download MySQL: Kunjungi situs resmi MySQL di https://dev.mysql.com/downloads/ . Pilih versi MySQL sesuai dengan sistem operasi Anda (Windows, MacOS, Linux). Instalasi MySQL: Jalankan installer yang telah diunduh. Ikuti instruksi di layar untuk menyelesaikan instalasi. Anda akan diminta untuk mengatur password untuk pengguna 'root' (pengguna default dengan hak administratif). Konfigurasi Awal: Setelah instalasi, MySQL akan menawarkan opsi untuk melakukan konfigurasi awal, seperti mengatur root password, mengaktifkan atau menonaktifkan remote access, dan pengaturan lainnya. Anda dapat menggunakan mysql_secure_installation untuk mengamankan instalasi MySQL Anda. 1.4. Arsitektur MySQL MySQL memiliki arsitektur client-server yang terdiri dari beberapa komponen utama: Client: Aplikasi atau program yang mengirimkan permintaan (query) ke server MySQL. Server: Server MySQL yang bertanggung jawab untuk menangani semua operasi database seperti eksekusi query, manipulasi data, dan pengelolaan transaksi. Storage Engine: MySQL mendukung beberapa storage engine seperti InnoDB, MyISAM, MEMORY, CSV, dll., yang bertanggung jawab untuk penyimpanan data fisik dan pengelolaan indeks. Setiap komponen ini bekerja sama untuk menyediakan layanan basis data yang andal dan efisien. 1.5. Tools dan Interface MySQL menyediakan berbagai tools dan antarmuka untuk berinteraksi dengan database. Berikut adalah beberapa tools dan interface yang sering digunakan: MySQL Command Line Client: Alat baris perintah bawaan yang memungkinkan Anda untuk menjalankan perintah SQL secara langsung di terminal. MySQL Workbench: Antarmuka grafis (GUI) yang user-friendly untuk mengelola database MySQL, membuat query, mendesain skema, dan banyak lagi. phpMyAdmin: Aplikasi web open-source yang ditulis dalam PHP yang digunakan untuk menangani administrasi MySQL melalui web browser. Setelah memahami dasar-dasar MySQL, Anda dapat memilih tools yang paling sesuai dengan kebutuhan Anda untuk berinteraksi dengan database MySQL.","title":"1 - Pengantar MySQL"},{"location":"#bab-1-pengantar-mysql","text":"","title":"BAB 1: Pengantar MySQL"},{"location":"#11-pengertian-mysql","text":"MySQL adalah sistem manajemen basis data relasional (RDBMS) yang bersifat open-source. MySQL menggunakan Structured Query Language (SQL) sebagai bahasa untuk mengakses dan mengelola data. MySQL dikembangkan oleh MySQL AB, sebuah perusahaan Swedia, dan sekarang dimiliki oleh Oracle Corporation.","title":"1.1. Pengertian MySQL"},{"location":"#12-sejarah-dan-perkembangan","text":"MySQL pertama kali dikembangkan pada tahun 1994 oleh Michael Widenius (Monty), David Axmark, dan Allan Larsson di Swedia. Berikut adalah beberapa tonggak penting dalam sejarah perkembangan MySQL: 1995: MySQL versi pertama dirilis. 2001: MySQL mulai mendukung transaksi dengan adanya tabel tipe InnoDB. 2008: Sun Microsystems mengakuisisi MySQL AB. 2010: Oracle Corporation mengakuisisi Sun Microsystems, dan dengan demikian MySQL juga menjadi bagian dari Oracle. MySQL terus berkembang dan diperbarui, dengan fitur-fitur baru yang diimplementasikan untuk meningkatkan kinerja, skalabilitas, dan keamanan.","title":"1.2. Sejarah dan Perkembangan"},{"location":"#13-instalasi-dan-konfigurasi","text":"Untuk memulai menggunakan MySQL, Anda perlu menginstal perangkat lunak MySQL di sistem Anda. Berikut adalah langkah-langkah dasar untuk instalasi dan konfigurasi MySQL: Langkah Instalasi: Download MySQL: Kunjungi situs resmi MySQL di https://dev.mysql.com/downloads/ . Pilih versi MySQL sesuai dengan sistem operasi Anda (Windows, MacOS, Linux). Instalasi MySQL: Jalankan installer yang telah diunduh. Ikuti instruksi di layar untuk menyelesaikan instalasi. Anda akan diminta untuk mengatur password untuk pengguna 'root' (pengguna default dengan hak administratif). Konfigurasi Awal: Setelah instalasi, MySQL akan menawarkan opsi untuk melakukan konfigurasi awal, seperti mengatur root password, mengaktifkan atau menonaktifkan remote access, dan pengaturan lainnya. Anda dapat menggunakan mysql_secure_installation untuk mengamankan instalasi MySQL Anda.","title":"1.3. Instalasi dan Konfigurasi"},{"location":"#14-arsitektur-mysql","text":"MySQL memiliki arsitektur client-server yang terdiri dari beberapa komponen utama: Client: Aplikasi atau program yang mengirimkan permintaan (query) ke server MySQL. Server: Server MySQL yang bertanggung jawab untuk menangani semua operasi database seperti eksekusi query, manipulasi data, dan pengelolaan transaksi. Storage Engine: MySQL mendukung beberapa storage engine seperti InnoDB, MyISAM, MEMORY, CSV, dll., yang bertanggung jawab untuk penyimpanan data fisik dan pengelolaan indeks. Setiap komponen ini bekerja sama untuk menyediakan layanan basis data yang andal dan efisien.","title":"1.4. Arsitektur MySQL"},{"location":"#15-tools-dan-interface","text":"MySQL menyediakan berbagai tools dan antarmuka untuk berinteraksi dengan database. Berikut adalah beberapa tools dan interface yang sering digunakan: MySQL Command Line Client: Alat baris perintah bawaan yang memungkinkan Anda untuk menjalankan perintah SQL secara langsung di terminal. MySQL Workbench: Antarmuka grafis (GUI) yang user-friendly untuk mengelola database MySQL, membuat query, mendesain skema, dan banyak lagi. phpMyAdmin: Aplikasi web open-source yang ditulis dalam PHP yang digunakan untuk menangani administrasi MySQL melalui web browser. Setelah memahami dasar-dasar MySQL, Anda dapat memilih tools yang paling sesuai dengan kebutuhan Anda untuk berinteraksi dengan database MySQL.","title":"1.5. Tools dan Interface"},{"location":"fungsi-dan-operator/","text":"BAB 4: Fungsi dan Operator 4.1. Fungsi Agregat Fungsi agregat digunakan untuk melakukan perhitungan terhadap sekumpulan data dan mengembalikan hasil tunggal. Fungsi ini sering digunakan dalam perintah SELECT dengan klausa GROUP BY . Berikut adalah beberapa fungsi agregat yang umum digunakan beserta contoh. COUNT() : Menghitung jumlah baris yang memenuhi kriteria. SUM() : Menghitung total nilai dari kolom numerik. AVG() : Menghitung rata-rata nilai dari kolom numerik. MIN() : Mengambil nilai minimum dari kolom. MAX() : Mengambil nilai maksimum dari kolom. -- Menghitung jumlah mahasiswa per jurusan SELECT jurusan , COUNT ( * ) AS jumlah_mahasiswa FROM Mahasiswa GROUP BY jurusan ; -- Menghitung total gaji dan rata-rata gaji dari karyawan SELECT SUM ( gaji ) AS total_gaji , AVG ( gaji ) AS rata_rata_gaji FROM Karyawan ; -- Mendapatkan nilai maksimum dan minimum dari kolom harga pada tabel Produk SELECT MAX ( harga ) AS harga_tertinggi , MIN ( harga ) AS harga_terendah FROM Produk ; 4.2. Fungsi String Fungsi string digunakan untuk memanipulasi data karakter atau teks dalam SQL. Fungsi ini berguna untuk operasi seperti menggabungkan, memotong, mencari, atau mengganti string. Berikut adalah beberapa fungsi string yang umum digunakan beserta contoh. CONCAT() : Menggabungkan dua atau lebih string. SUBSTRING() : Mengambil sebagian string dari suatu teks. LENGTH() : Mengembalikan panjang string dalam karakter. UPPER() : Mengubah semua karakter string menjadi huruf besar. LOWER() : Mengubah semua karakter string menjadi huruf kecil. REPLACE() : Mengganti teks tertentu dalam string dengan teks lain. -- Menggabungkan nama depan dan nama belakang menjadi nama lengkap SELECT CONCAT ( nama_depan , ' ' , nama_belakang ) AS nama_lengkap FROM Pelanggan ; -- Mengambil 5 karakter pertama dari kolom deskripsi SELECT SUBSTRING ( deskripsi , 1 , 5 ) AS ringkasan FROM Artikel ; -- Menghitung panjang string pada kolom nama SELECT nama , LENGTH ( nama ) AS panjang_nama FROM Pegawai ; -- Mengubah nama produk menjadi huruf besar SELECT UPPER ( nama_produk ) AS nama_produk_uppercase FROM Produk ; -- Mengganti kata \"lama\" dengan \"baru\" dalam deskripsi produk SELECT REPLACE ( deskripsi , 'lama' , 'baru' ) AS deskripsi_baru FROM Produk ; 4.3. Fungsi DateTime Fungsi DateTime digunakan untuk memanipulasi dan mengolah data tanggal dan waktu. Fungsi ini sangat penting dalam aplikasi yang memerlukan penanganan waktu seperti pemesanan, pengiriman, dan lain-lain. Berikut adalah beberapa fungsi DateTime yang umum digunakan beserta contoh NOW() : Mengembalikan tanggal dan waktu saat ini. CURDATE() : Mengembalikan tanggal saat ini. CURTIME() : Mengembalikan waktu saat ini. DATE() : Mengambil bagian tanggal dari nilai DateTime. TIME() : Mengambil bagian waktu dari nilai DateTime. DATEDIFF() : Menghitung selisih hari antara dua tanggal. DATE_ADD() : Menambah interval waktu ke tanggal tertentu. DATE_SUB() : Mengurangi interval waktu dari tanggal tertentu. -- Mengambil tanggal dan waktu saat ini SELECT NOW () AS tanggal_waktu_saat_ini ; -- Mengambil tanggal saat ini SELECT CURDATE () AS tanggal_hari_ini ; -- Mengambil selisih hari antara dua tanggal SELECT DATEDIFF ( '2024-12-31' , '2024-01-01' ) AS selisih_hari ; -- Menambah 7 hari ke tanggal saat ini SELECT DATE_ADD ( CURDATE (), INTERVAL 7 DAY ) AS tanggal_minggu_depan ; -- Mengurangi 1 bulan dari tanggal saat ini SELECT DATE_SUB ( CURDATE (), INTERVAL 1 MONTH ) AS tanggal_bulan_lalu ; 4.4. Operator Logika Operator logika digunakan dalam klausa WHERE untuk menggabungkan beberapa kondisi. Berikut adalah operator logika yang umum digunakan beserta contoh. AND : Mengembalikan true jika semua kondisi yang dipisahkan oleh AND adalah true. OR : Mengembalikan true jika salah satu kondisi yang dipisahkan oleh OR adalah true. NOT : Membalik nilai boolean dari ekspresi. -- Memilih semua produk yang harganya antara 100 dan 500 dan stoknya lebih dari 0 SELECT * FROM Produk WHERE harga BETWEEN 100 AND 500 AND stok > 0 ; -- Memilih semua pelanggan yang berasal dari kota Jakarta atau Surabaya SELECT * FROM Pelanggan WHERE kota = 'Jakarta' OR kota = 'Surabaya' ; -- Memilih semua karyawan yang tidak bekerja di departemen IT SELECT * FROM Karyawan WHERE NOT departemen = 'IT' ; 4.5. Operator Perbandingan Operator perbandingan digunakan untuk membandingkan dua nilai. Berikut adalah operator perbandingan yang umum digunakan beserta contoh. = : Sama dengan != atau <> : Tidak sama dengan > : Lebih besar dari < : Lebih kecil dari >= : Lebih besar atau sama dengan <= : Lebih kecil atau sama dengan BETWEEN : Di antara dua nilai IN : Dalam kumpulan nilai LIKE : Pencocokan pola string -- Memilih semua produk dengan harga lebih dari 100 SELECT * FROM Produk WHERE harga > 100 ; -- Memilih semua pelanggan yang tidak berasal dari kota Bandung SELECT * FROM Pelanggan WHERE kota != 'Bandung' ; -- Memilih semua buku yang diterbitkan antara tahun 2000 dan 2020 SELECT * FROM Buku WHERE tahun_terbit BETWEEN 2000 AND 2020 ; -- Memilih semua nama yang mengandung huruf 'a' SELECT * FROM Pegawai WHERE nama LIKE '%a%' ;","title":"4 - Fungsi dan Operator"},{"location":"fungsi-dan-operator/#bab-4-fungsi-dan-operator","text":"","title":"BAB 4: Fungsi dan Operator"},{"location":"fungsi-dan-operator/#41-fungsi-agregat","text":"Fungsi agregat digunakan untuk melakukan perhitungan terhadap sekumpulan data dan mengembalikan hasil tunggal. Fungsi ini sering digunakan dalam perintah SELECT dengan klausa GROUP BY . Berikut adalah beberapa fungsi agregat yang umum digunakan beserta contoh. COUNT() : Menghitung jumlah baris yang memenuhi kriteria. SUM() : Menghitung total nilai dari kolom numerik. AVG() : Menghitung rata-rata nilai dari kolom numerik. MIN() : Mengambil nilai minimum dari kolom. MAX() : Mengambil nilai maksimum dari kolom. -- Menghitung jumlah mahasiswa per jurusan SELECT jurusan , COUNT ( * ) AS jumlah_mahasiswa FROM Mahasiswa GROUP BY jurusan ; -- Menghitung total gaji dan rata-rata gaji dari karyawan SELECT SUM ( gaji ) AS total_gaji , AVG ( gaji ) AS rata_rata_gaji FROM Karyawan ; -- Mendapatkan nilai maksimum dan minimum dari kolom harga pada tabel Produk SELECT MAX ( harga ) AS harga_tertinggi , MIN ( harga ) AS harga_terendah FROM Produk ;","title":"4.1. Fungsi Agregat"},{"location":"fungsi-dan-operator/#42-fungsi-string","text":"Fungsi string digunakan untuk memanipulasi data karakter atau teks dalam SQL. Fungsi ini berguna untuk operasi seperti menggabungkan, memotong, mencari, atau mengganti string. Berikut adalah beberapa fungsi string yang umum digunakan beserta contoh. CONCAT() : Menggabungkan dua atau lebih string. SUBSTRING() : Mengambil sebagian string dari suatu teks. LENGTH() : Mengembalikan panjang string dalam karakter. UPPER() : Mengubah semua karakter string menjadi huruf besar. LOWER() : Mengubah semua karakter string menjadi huruf kecil. REPLACE() : Mengganti teks tertentu dalam string dengan teks lain. -- Menggabungkan nama depan dan nama belakang menjadi nama lengkap SELECT CONCAT ( nama_depan , ' ' , nama_belakang ) AS nama_lengkap FROM Pelanggan ; -- Mengambil 5 karakter pertama dari kolom deskripsi SELECT SUBSTRING ( deskripsi , 1 , 5 ) AS ringkasan FROM Artikel ; -- Menghitung panjang string pada kolom nama SELECT nama , LENGTH ( nama ) AS panjang_nama FROM Pegawai ; -- Mengubah nama produk menjadi huruf besar SELECT UPPER ( nama_produk ) AS nama_produk_uppercase FROM Produk ; -- Mengganti kata \"lama\" dengan \"baru\" dalam deskripsi produk SELECT REPLACE ( deskripsi , 'lama' , 'baru' ) AS deskripsi_baru FROM Produk ;","title":"4.2. Fungsi String"},{"location":"fungsi-dan-operator/#43-fungsi-datetime","text":"Fungsi DateTime digunakan untuk memanipulasi dan mengolah data tanggal dan waktu. Fungsi ini sangat penting dalam aplikasi yang memerlukan penanganan waktu seperti pemesanan, pengiriman, dan lain-lain. Berikut adalah beberapa fungsi DateTime yang umum digunakan beserta contoh NOW() : Mengembalikan tanggal dan waktu saat ini. CURDATE() : Mengembalikan tanggal saat ini. CURTIME() : Mengembalikan waktu saat ini. DATE() : Mengambil bagian tanggal dari nilai DateTime. TIME() : Mengambil bagian waktu dari nilai DateTime. DATEDIFF() : Menghitung selisih hari antara dua tanggal. DATE_ADD() : Menambah interval waktu ke tanggal tertentu. DATE_SUB() : Mengurangi interval waktu dari tanggal tertentu. -- Mengambil tanggal dan waktu saat ini SELECT NOW () AS tanggal_waktu_saat_ini ; -- Mengambil tanggal saat ini SELECT CURDATE () AS tanggal_hari_ini ; -- Mengambil selisih hari antara dua tanggal SELECT DATEDIFF ( '2024-12-31' , '2024-01-01' ) AS selisih_hari ; -- Menambah 7 hari ke tanggal saat ini SELECT DATE_ADD ( CURDATE (), INTERVAL 7 DAY ) AS tanggal_minggu_depan ; -- Mengurangi 1 bulan dari tanggal saat ini SELECT DATE_SUB ( CURDATE (), INTERVAL 1 MONTH ) AS tanggal_bulan_lalu ;","title":"4.3. Fungsi DateTime"},{"location":"fungsi-dan-operator/#44-operator-logika","text":"Operator logika digunakan dalam klausa WHERE untuk menggabungkan beberapa kondisi. Berikut adalah operator logika yang umum digunakan beserta contoh. AND : Mengembalikan true jika semua kondisi yang dipisahkan oleh AND adalah true. OR : Mengembalikan true jika salah satu kondisi yang dipisahkan oleh OR adalah true. NOT : Membalik nilai boolean dari ekspresi. -- Memilih semua produk yang harganya antara 100 dan 500 dan stoknya lebih dari 0 SELECT * FROM Produk WHERE harga BETWEEN 100 AND 500 AND stok > 0 ; -- Memilih semua pelanggan yang berasal dari kota Jakarta atau Surabaya SELECT * FROM Pelanggan WHERE kota = 'Jakarta' OR kota = 'Surabaya' ; -- Memilih semua karyawan yang tidak bekerja di departemen IT SELECT * FROM Karyawan WHERE NOT departemen = 'IT' ;","title":"4.4. Operator Logika"},{"location":"fungsi-dan-operator/#45-operator-perbandingan","text":"Operator perbandingan digunakan untuk membandingkan dua nilai. Berikut adalah operator perbandingan yang umum digunakan beserta contoh. = : Sama dengan != atau <> : Tidak sama dengan > : Lebih besar dari < : Lebih kecil dari >= : Lebih besar atau sama dengan <= : Lebih kecil atau sama dengan BETWEEN : Di antara dua nilai IN : Dalam kumpulan nilai LIKE : Pencocokan pola string -- Memilih semua produk dengan harga lebih dari 100 SELECT * FROM Produk WHERE harga > 100 ; -- Memilih semua pelanggan yang tidak berasal dari kota Bandung SELECT * FROM Pelanggan WHERE kota != 'Bandung' ; -- Memilih semua buku yang diterbitkan antara tahun 2000 dan 2020 SELECT * FROM Buku WHERE tahun_terbit BETWEEN 2000 AND 2020 ; -- Memilih semua nama yang mengandung huruf 'a' SELECT * FROM Pegawai WHERE nama LIKE '%a%' ;","title":"4.5. Operator Perbandingan"},{"location":"query-dasar-sql/","text":"BAB 3: Query Dasar SQL 3.1. Perintah DDL Perintah Data Definition Language (DDL) digunakan untuk mendefinisikan struktur database. Berikut adalah beberapa perintah DDL yang umum digunakan beserta contoh. CREATE: Membuat database atau tabel baru. ALTER: Memodifikasi struktur tabel yang ada. DROP: Menghapus database atau tabel. TRUNCATE: Menghapus semua baris dalam tabel tanpa menghapus struktur tabel. CREATE TABLE Buku ( id INT AUTO_INCREMENT PRIMARY KEY , judul VARCHAR ( 255 ), pengarang VARCHAR ( 100 ), tahun_terbit YEAR ); ALTER TABLE Buku ADD penerbit VARCHAR ( 100 ); DROP TABLE Buku ; TRUNCATE TABLE Buku ; 3.2. Perintah DML Perintah Data Manipulation Language (DML) digunakan untuk memanipulasi data dalam tabel. Berikut adalah beberapa perintah DML yang umum digunakan beserta contoh. INSERT: Menambahkan data baru ke tabel. SELECT: Mengambil data dari satu atau lebih tabel. UPDATE: Memperbarui data yang ada dalam tabel. DELETE: Menghapus data dari tabel. INSERT INTO Buku ( judul , pengarang , tahun_terbit ) VALUES ( 'Pemrograman Python' , 'John Doe' , 2020 ); SELECT * FROM Buku ; UPDATE Buku SET tahun_terbit = 2021 WHERE judul = 'Pemrograman Python' ; DELETE FROM Buku WHERE judul = 'Pemrograman Python' ; 3.3. Filter dan Sorting Filter digunakan untuk menyaring data berdasarkan kondisi tertentu menggunakan klausa WHERE . Sorting digunakan untuk mengurutkan data berdasarkan satu atau lebih kolom menggunakan klausa ORDER BY . Berikut adalah contoh filter dan sorting. SELECT * FROM Buku WHERE pengarang = 'John Doe' ORDER BY tahun_terbit DESC ; 3.4. Limit dan Offset Klausa LIMIT digunakan untuk membatasi jumlah baris yang diambil oleh query, sedangkan OFFSET digunakan untuk melewati sejumlah baris sebelum memulai pengambilan data. Berikut adalah contoh penggunaan LIMIT dan OFFSET . SELECT * FROM Buku LIMIT 5 ; -- Ambil 5 baris pertama SELECT * FROM Buku LIMIT 5 OFFSET 10 ; -- Ambil 5 baris, mulai dari baris ke-11 3.5. Distinct dan Case DISTINCT digunakan untuk menghapus duplikasi data dalam hasil query. CASE digunakan untuk melakukan operasi kondisional dalam query. Berikut adalah contoh penggunaan DISTINCT dan CASE . SELECT DISTINCT pengarang FROM Buku ; -- Mengambil daftar pengarang tanpa duplikasi SELECT judul , CASE WHEN tahun_terbit < 2000 THEN 'Old' ELSE 'New' END AS Kategori FROM Buku ;","title":"3 - Query Dasar SQL"},{"location":"query-dasar-sql/#bab-3-query-dasar-sql","text":"","title":"BAB 3: Query Dasar SQL"},{"location":"query-dasar-sql/#31-perintah-ddl","text":"Perintah Data Definition Language (DDL) digunakan untuk mendefinisikan struktur database. Berikut adalah beberapa perintah DDL yang umum digunakan beserta contoh. CREATE: Membuat database atau tabel baru. ALTER: Memodifikasi struktur tabel yang ada. DROP: Menghapus database atau tabel. TRUNCATE: Menghapus semua baris dalam tabel tanpa menghapus struktur tabel. CREATE TABLE Buku ( id INT AUTO_INCREMENT PRIMARY KEY , judul VARCHAR ( 255 ), pengarang VARCHAR ( 100 ), tahun_terbit YEAR ); ALTER TABLE Buku ADD penerbit VARCHAR ( 100 ); DROP TABLE Buku ; TRUNCATE TABLE Buku ;","title":"3.1. Perintah DDL"},{"location":"query-dasar-sql/#32-perintah-dml","text":"Perintah Data Manipulation Language (DML) digunakan untuk memanipulasi data dalam tabel. Berikut adalah beberapa perintah DML yang umum digunakan beserta contoh. INSERT: Menambahkan data baru ke tabel. SELECT: Mengambil data dari satu atau lebih tabel. UPDATE: Memperbarui data yang ada dalam tabel. DELETE: Menghapus data dari tabel. INSERT INTO Buku ( judul , pengarang , tahun_terbit ) VALUES ( 'Pemrograman Python' , 'John Doe' , 2020 ); SELECT * FROM Buku ; UPDATE Buku SET tahun_terbit = 2021 WHERE judul = 'Pemrograman Python' ; DELETE FROM Buku WHERE judul = 'Pemrograman Python' ;","title":"3.2. Perintah DML"},{"location":"query-dasar-sql/#33-filter-dan-sorting","text":"Filter digunakan untuk menyaring data berdasarkan kondisi tertentu menggunakan klausa WHERE . Sorting digunakan untuk mengurutkan data berdasarkan satu atau lebih kolom menggunakan klausa ORDER BY . Berikut adalah contoh filter dan sorting. SELECT * FROM Buku WHERE pengarang = 'John Doe' ORDER BY tahun_terbit DESC ;","title":"3.3. Filter dan Sorting"},{"location":"query-dasar-sql/#34-limit-dan-offset","text":"Klausa LIMIT digunakan untuk membatasi jumlah baris yang diambil oleh query, sedangkan OFFSET digunakan untuk melewati sejumlah baris sebelum memulai pengambilan data. Berikut adalah contoh penggunaan LIMIT dan OFFSET . SELECT * FROM Buku LIMIT 5 ; -- Ambil 5 baris pertama SELECT * FROM Buku LIMIT 5 OFFSET 10 ; -- Ambil 5 baris, mulai dari baris ke-11","title":"3.4. Limit dan Offset"},{"location":"query-dasar-sql/#35-distinct-dan-case","text":"DISTINCT digunakan untuk menghapus duplikasi data dalam hasil query. CASE digunakan untuk melakukan operasi kondisional dalam query. Berikut adalah contoh penggunaan DISTINCT dan CASE . SELECT DISTINCT pengarang FROM Buku ; -- Mengambil daftar pengarang tanpa duplikasi SELECT judul , CASE WHEN tahun_terbit < 2000 THEN 'Old' ELSE 'New' END AS Kategori FROM Buku ;","title":"3.5. Distinct dan Case"},{"location":"struktur-database/","text":"BAB 2: Struktur Database 2.1. Tabel dan Kolom Tabel adalah struktur dasar dalam database yang digunakan untuk menyimpan data dalam bentuk baris dan kolom. Setiap tabel memiliki nama unik dan terdiri dari kolom-kolom yang mendefinisikan jenis data yang akan disimpan. Kolom menentukan struktur data dalam tabel dan setiap baris menyimpan data aktual. Berikut adalah contoh query untuk membuat tabel. CREATE TABLE Mahasiswa ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ), jurusan VARCHAR ( 50 ), angkatan YEAR ); 2.2. Tipe Data Tipe data menentukan jenis data yang dapat disimpan dalam sebuah kolom. Berikut adalah beberapa tipe data yang umum digunakan beserta contoh. Numerik: INT, FLOAT, DOUBLE, DECIMAL String: CHAR, VARCHAR, TEXT, BLOB Date/Time: DATE, DATETIME, TIMESTAMP, TIME, YEAR Boolean: BOOL, BOOLEAN CREATE TABLE Produk ( id INT AUTO_INCREMENT PRIMARY KEY , nama_produk VARCHAR ( 100 ), harga DECIMAL ( 10 , 2 ), tanggal_ditambahkan DATE ); 2.3. Relasi Antar Tabel Relasi antar tabel menggambarkan bagaimana tabel-tabel dalam database berhubungan satu sama lain. Berikut adalah beberapa jenis relasi yang umum digunakan beserta contoh. One-to-One: Satu baris di tabel A berhubungan dengan satu baris di tabel B. One-to-Many: Satu baris di tabel A berhubungan dengan banyak baris di tabel B. Many-to-Many: Banyak baris di tabel A berhubungan dengan banyak baris di tabel B. -- Contoh membuat relasi antar tabel (One-to-Many) CREATE TABLE Dosen ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ) ); CREATE TABLE MataKuliah ( id INT AUTO_INCREMENT PRIMARY KEY , nama_matkul VARCHAR ( 100 ), dosen_id INT , FOREIGN KEY ( dosen_id ) REFERENCES Dosen ( id ) ); 2.4. Index dan Kunci Indeks digunakan untuk meningkatkan kecepatan pencarian data dalam tabel. Kunci (key) adalah kolom atau kombinasi kolom yang digunakan untuk mengidentifikasi baris secara unik. Berikut adalah beberapa jenis kunci yang umum digunakan beserta contoh. Primary Key: Unik dan tidak boleh null. Foreign Key: Menunjukkan hubungan antar tabel. Unique Key: Unik tapi boleh null. Index Key: Meningkatkan performa pencarian. CREATE TABLE Pegawai ( id INT AUTO_INCREMENT , nama VARCHAR ( 100 ), email VARCHAR ( 100 ), PRIMARY KEY ( id ), UNIQUE KEY ( email ) ); 2.5. Normalisasi Data Normalisasi adalah proses pengorganisasian data dalam tabel untuk mengurangi redundansi dan meningkatkan integritas data. Berikut adalah beberapa bentuk normalisasi yang umum digunakan beserta contoh. 1NF (First Normal Form): Menghilangkan grup berulang dalam kolom. 2NF (Second Normal Form): Menghilangkan ketergantungan parsial. 3NF (Third Normal Form): Menghilangkan ketergantungan transitif. -- 1NF CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ), produk1 VARCHAR ( 100 ), produk2 VARCHAR ( 100 ) ); -- 2NF (pemisahan produk ke tabel terpisah) CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ) ); CREATE TABLE ProdukPembelian ( id INT , pembelian_id INT , produk VARCHAR ( 100 ), FOREIGN KEY ( pembelian_id ) REFERENCES Pembelian ( id ) );","title":"2 - Struktur Database"},{"location":"struktur-database/#bab-2-struktur-database","text":"","title":"BAB 2: Struktur Database"},{"location":"struktur-database/#21-tabel-dan-kolom","text":"Tabel adalah struktur dasar dalam database yang digunakan untuk menyimpan data dalam bentuk baris dan kolom. Setiap tabel memiliki nama unik dan terdiri dari kolom-kolom yang mendefinisikan jenis data yang akan disimpan. Kolom menentukan struktur data dalam tabel dan setiap baris menyimpan data aktual. Berikut adalah contoh query untuk membuat tabel. CREATE TABLE Mahasiswa ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ), jurusan VARCHAR ( 50 ), angkatan YEAR );","title":"2.1. Tabel dan Kolom"},{"location":"struktur-database/#22-tipe-data","text":"Tipe data menentukan jenis data yang dapat disimpan dalam sebuah kolom. Berikut adalah beberapa tipe data yang umum digunakan beserta contoh. Numerik: INT, FLOAT, DOUBLE, DECIMAL String: CHAR, VARCHAR, TEXT, BLOB Date/Time: DATE, DATETIME, TIMESTAMP, TIME, YEAR Boolean: BOOL, BOOLEAN CREATE TABLE Produk ( id INT AUTO_INCREMENT PRIMARY KEY , nama_produk VARCHAR ( 100 ), harga DECIMAL ( 10 , 2 ), tanggal_ditambahkan DATE );","title":"2.2. Tipe Data"},{"location":"struktur-database/#23-relasi-antar-tabel","text":"Relasi antar tabel menggambarkan bagaimana tabel-tabel dalam database berhubungan satu sama lain. Berikut adalah beberapa jenis relasi yang umum digunakan beserta contoh. One-to-One: Satu baris di tabel A berhubungan dengan satu baris di tabel B. One-to-Many: Satu baris di tabel A berhubungan dengan banyak baris di tabel B. Many-to-Many: Banyak baris di tabel A berhubungan dengan banyak baris di tabel B. -- Contoh membuat relasi antar tabel (One-to-Many) CREATE TABLE Dosen ( id INT AUTO_INCREMENT PRIMARY KEY , nama VARCHAR ( 100 ) ); CREATE TABLE MataKuliah ( id INT AUTO_INCREMENT PRIMARY KEY , nama_matkul VARCHAR ( 100 ), dosen_id INT , FOREIGN KEY ( dosen_id ) REFERENCES Dosen ( id ) );","title":"2.3. Relasi Antar Tabel"},{"location":"struktur-database/#24-index-dan-kunci","text":"Indeks digunakan untuk meningkatkan kecepatan pencarian data dalam tabel. Kunci (key) adalah kolom atau kombinasi kolom yang digunakan untuk mengidentifikasi baris secara unik. Berikut adalah beberapa jenis kunci yang umum digunakan beserta contoh. Primary Key: Unik dan tidak boleh null. Foreign Key: Menunjukkan hubungan antar tabel. Unique Key: Unik tapi boleh null. Index Key: Meningkatkan performa pencarian. CREATE TABLE Pegawai ( id INT AUTO_INCREMENT , nama VARCHAR ( 100 ), email VARCHAR ( 100 ), PRIMARY KEY ( id ), UNIQUE KEY ( email ) );","title":"2.4. Index dan Kunci"},{"location":"struktur-database/#25-normalisasi-data","text":"Normalisasi adalah proses pengorganisasian data dalam tabel untuk mengurangi redundansi dan meningkatkan integritas data. Berikut adalah beberapa bentuk normalisasi yang umum digunakan beserta contoh. 1NF (First Normal Form): Menghilangkan grup berulang dalam kolom. 2NF (Second Normal Form): Menghilangkan ketergantungan parsial. 3NF (Third Normal Form): Menghilangkan ketergantungan transitif. -- 1NF CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ), produk1 VARCHAR ( 100 ), produk2 VARCHAR ( 100 ) ); -- 2NF (pemisahan produk ke tabel terpisah) CREATE TABLE Pembelian ( id INT , pembeli VARCHAR ( 100 ) ); CREATE TABLE ProdukPembelian ( id INT , pembelian_id INT , produk VARCHAR ( 100 ), FOREIGN KEY ( pembelian_id ) REFERENCES Pembelian ( id ) );","title":"2.5. Normalisasi Data"}]}